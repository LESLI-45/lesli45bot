#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
LESLI45BOT - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç POSTGRES_URL –≤–º–µ—Å—Ç–æ DATABASE_URL
"""

import logging
import os
import sys
import psycopg2
from psycopg2.extras import RealDictCursor

# Telegram Bot
import telebot
from telebot import types

# OpenAI
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
    OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
    POSTGRES_URL = os.getenv('POSTGRES_URL')  # –ò–ó–ú–ï–ù–ï–ù–û!
    
    def __init__(self):
        if not self.TELEGRAM_TOKEN:
            logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            sys.exit(1)
        if not self.OPENAI_API_KEY:
            logger.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            sys.exit(1)

config = Config()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(config.TELEGRAM_TOKEN)

class LesliAssistant:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.setup_database()
        self.openai_client = OpenAI(api_key=config.OPENAI_API_KEY)
        logger.info("‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def setup_database(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if config.POSTGRES_URL:  # –ò–ó–ú–ï–ù–ï–ù–û!
                logger.info("üîó –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ PostgreSQL...")
                logger.info(f"üîç POSTGRES_URL –¥–ª–∏–Ω–∞: {len(config.POSTGRES_URL)}")
                logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {config.POSTGRES_URL[:30]}...")
                
                self.db = psycopg2.connect(config.POSTGRES_URL)  # –ò–ó–ú–ï–ù–ï–ù–û!
                self.db.autocommit = True
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ!")
                self.create_tables()
            else:
                logger.error("‚ùå POSTGRES_URL –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                sys.exit(1)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: {e}")
            sys.exit(1)

    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        try:
            with self.db.cursor() as cursor:
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS knowledge_base (
                        id SERIAL PRIMARY KEY,
                        book_name VARCHAR(255),
                        content TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")

    def get_knowledge_count(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ"""
        try:
            with self.db.cursor() as cursor:
                cursor.execute("SELECT COUNT(*) FROM knowledge_base")
                result = cursor.fetchone()
                return result[0] if result else 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π: {e}")
            return 0

    def search_knowledge(self, query):
        """–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
        try:
            with self.db.cursor() as cursor:
                cursor.execute("""
                    SELECT content FROM knowledge_base 
                    WHERE content ILIKE %s 
                    LIMIT 3
                """, (f'%{query}%',))
                
                results = cursor.fetchall()
                return [row[0] for row in results]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return []

    def get_ai_response(self, user_message, user_id=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI"""
        try:
            # –ò—â–µ–º –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
            knowledge = self.search_knowledge(user_message)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            system_prompt = """–¢—ã LESLI45BOT - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–æ–¥–∏–∫ –ê–ª–µ–∫—Å–∞ –õ–µ—Å–ª–∏.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å –≤ –æ–±—â–µ–Ω–∏–∏ —Å –¥–µ–≤—É—à–∫–∞–º–∏
‚Ä¢ –î–∞–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—é
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞–Ω–∏—è –∏–∑ –∫–Ω–∏–≥ –õ–µ—Å–ª–∏

–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
‚Ä¢ –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
‚Ä¢ –ë—É–¥—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º, –Ω–æ –Ω–µ –∑–∞–Ω—É–¥–æ–π"""

            if knowledge:
                system_prompt += f"\n\n–ò–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –õ–µ—Å–ª–∏:\n{knowledge[0][:500]}..."

            response = self.openai_client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_message}
                ],
                max_tokens=1000,
                temperature=0.7
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
            return "‚ùå –ò–∑–≤–∏–Ω–∏, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ò–ò. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
assistant = LesliAssistant()

def create_main_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    buttons = [
        ("üéØ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "menu_situacia"),
        ("üí¨ –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏", "menu_perepiska"),
        ("üì± –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "menu_pervoe"),
        ("üî• –†–∞–∑–æ–≥—Ä–µ–≤ –∏ —Ñ–ª–∏—Ä—Ç", "menu_razogrev"),
        ("üìû –ó–≤–æ–Ω–∫–∏ –∏ —Å–≤–∏–¥–∞–Ω–∏—è", "menu_zvonki"),
        ("‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã", "menu_holodnye"),
        ("üé≠ –°—Ç–∏–ª–∏ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—è", "menu_stili"),
        ("üë© –¢–∏–ø–∞–∂–∏ –¥–µ–≤—É—à–µ–∫", "menu_tipy"),
        ("üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", "menu_psihologia"),
        ("üé¨ –ö–µ–π—Å—ã –∏ –∏—Å—Ç–æ—Ä–∏–∏", "menu_keis"),
        ("üí° –§—Ä–µ–π–º—ã", "menu_freims"),
        ("üîç –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ", "menu_poisk"),
        ("üíµ –î–µ–Ω—å–≥–∏ –∏ —Å—Ç–∞—Ç—É—Å", "menu_dengi"),
        ("üèÜ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "menu_uverennost"),
        ("üÜò SOS –°–∏–≥–Ω–∞–ª—ã", "menu_sos"),
        ("‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è", "menu_otnosheniya"),
        ("üé™ –¢–µ–º—ã –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏–π", "menu_temy"),
        ("üîß –õ–∏—á–Ω—ã–π –∫–æ—É—á–∏–Ω–≥", "menu_kouching")
    ]
    
    for text, callback in buttons:
        markup.add(types.InlineKeyboardButton(text, callback_data=callback))
    
    return markup

@bot.message_handler(commands=['start'])
def start_command(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_name = message.from_user.first_name or "–¥—Ä—É–≥"
    
    welcome_text = f"""üî• **–ü—Ä–∏–≤–µ—Ç, {user_name}!**

–Ø LESLI45BOT - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–æ–¥–∏–∫ **–ê–ª–µ–∫—Å–∞ –õ–µ—Å–ª–∏**.

üéØ **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ üí¨ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –¥–µ–≤—É—à–∫–∞–º–∏
‚Ä¢ üî• –ü–æ–º–æ–≥–∞—Ç—å —Å —Ñ–ª–∏—Ä—Ç–æ–º –∏ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏–µ–º  
‚Ä¢ üì± –°–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–µ—Ä–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ üé≠ –ü–æ–¥–±–∏—Ä–∞—Ç—å —Å—Ç–∏–ª–∏ –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø–∞–∂–∏
‚Ä¢ üß† –î–∞–≤–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã
‚Ä¢ üí° –û–±—É—á–∞—Ç—å —Ñ—Ä–µ–π–º–∞–º –∏ —Ç–µ—Ö–Ω–∏–∫–∞–º

üìö **–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:** {assistant.get_knowledge_count()} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–Ω–∏–≥ –õ–µ—Å–ª–∏
ü§ñ **–ò–ò:** GPT-4o –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º! üëá"""
    
    bot.send_message(
        message.chat.id,
        welcome_text,
        reply_markup=create_main_menu(),
        parse_mode='Markdown'
    )

@bot.message_handler(commands=['debug'])
def debug_command(message):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    count = assistant.get_knowledge_count()
    debug_text = f"""üîç **–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {count}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ì–æ—Ç–æ–≤–∞' if count > 0 else '‚ùå –ü—É—Å—Ç–∞'}

üîß **–°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL (Render)
‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: POSTGRES_URL
‚Ä¢ OpenAI: GPT-4o
‚Ä¢ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞: pyTelegramBotAPI"""
    
    bot.reply_to(message, debug_text, parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    try:
        if call.data == "menu_back":
            bot.edit_message_text(
                "üî• **LESLI45BOT - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—é! üëá",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=create_main_menu(),
                parse_mode='Markdown'
            )
            return

        menu_type = call.data.replace("menu_", "")
        
        # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
        responses = {
            "situacia": "üéØ **–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è**\n\n–û–ø–∏—à–∏ —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é —Å –¥–µ–≤—É—à–∫–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ, –∏ —è –¥–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∫–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ!",
            "perepiska": "üí¨ **–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏**\n\n–ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏–ª–∏ –æ–ø–∏—à–∏ –¥–∏–∞–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ—ë –∏–Ω—Ç–µ—Ä–µ—Å –∏ –ø–æ–¥—Å–∫–∞–∂—É —á—Ç–æ –ø–∏—Å–∞—Ç—å –¥–∞–ª—å—à–µ!",
            "pervoe": "üì± **–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**\n\n–†–∞—Å—Å–∫–∞–∂–∏ –≥–¥–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å –¥–µ–≤—É—à–∫–æ–π –∏ —á—Ç–æ –æ –Ω–µ–π –∑–Ω–∞–µ—à—å. –°–æ—Å—Ç–∞–≤–ª—é –∏–¥–µ–∞–ª—å–Ω–æ–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
            "razogrev": "üî• **–†–∞–∑–æ–≥—Ä–µ–≤ –∏ —Ñ–ª–∏—Ä—Ç**\n\n–û–ø–∏—à–∏ –Ω–∞ –∫–∞–∫–æ–π —Å—Ç–∞–¥–∏–∏ –æ–±—â–µ–Ω–∏—è –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å. –î–∞–º —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–∞–∑–æ–≥—Ä–µ–≤–∞ –∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏!",
            "zvonki": "üìû **–ó–≤–æ–Ω–∫–∏ –∏ —Å–≤–∏–¥–∞–Ω–∏—è**\n\n–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–∏—Ç—É–∞—Ü–∏–∏ —Å –¥–µ–≤—É—à–∫–æ–π. –ü–æ–¥—Å–∫–∞–∂—É –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏ –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–≤–∏–¥–∞–Ω–∏—è!",
            "sos": "üÜò **SOS –°–∏–≥–Ω–∞–ª—ã**\n\n–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è? –ë—ã—Å—Ç—Ä–æ –æ–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É - –¥–∞–º —Å—Ä–æ—á–Ω—ã–π —Å–æ–≤–µ—Ç –∏–∑ –∞—Ä—Å–µ–Ω–∞–ª–∞ –õ–µ—Å–ª–∏!"
        }
        
        response_text = responses.get(menu_type, "ü§ñ –û–ø–∏—à–∏ —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é, –∏ —è –ø–æ–º–æ–≥—É!")
        
        bot.edit_message_text(
            text=response_text,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back")
            ),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")

@bot.message_handler(content_types=['text'])
def handle_text(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_message = message.text
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        ai_response = assistant.get_ai_response(user_message, user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back"))
        
        bot.reply_to(message, ai_response, reply_markup=markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    response = """üì∏ **–ü–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ!**

–ü–æ–∫–∞ –Ω–µ —É–º–µ—é –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–æ –º–æ–≥—É –¥–∞—Ç—å –æ—Ç–ª–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø–µ—Ä–µ–ø–∏—Å–∫–∏!

üî• **–û–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º:**
‚Ä¢ –ß—Ç–æ –æ–Ω–∞ –ø–∏—à–µ—Ç
‚Ä¢ –ö–∞–∫ –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ—Ç  
‚Ä¢ –ö–∞–∫–∏–µ —ç–º–æ–¥–∑–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
‚Ä¢ –ó–∞–¥–∞–µ—Ç –ª–∏ –≤–æ–ø—Ä–æ—Å—ã

–ò –ø–æ–ª—É—á–∏—à—å —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑! üí™"""
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí¨ –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏", callback_data="menu_perepiska"))
    
    bot.reply_to(message, response, reply_markup=markup, parse_mode='Markdown')

if __name__ == "__main__":
    try:
        logger.info("üöÄ LESLI45BOT –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        logger.info("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        logger.info("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot.polling(none_stop=True, interval=1, timeout=30)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

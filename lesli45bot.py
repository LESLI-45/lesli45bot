#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
LESLI45BOT - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π Telegram-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—é
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ GPT-4o —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –∏–∑ –∫–Ω–∏–≥ –ê–ª–µ–∫—Å–∞ –õ–µ—Å–ª–∏

–í–ï–†–°–ò–Ø –° –î–ò–ê–ì–ù–û–°–¢–ò–ö–û–ô –ò –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ô –ó–ê–ì–†–£–ó–ö–û–ô –ö–ù–ò–ì
"""

import asyncio
import logging
from datetime import datetime, timedelta
import json
import os
import sqlite3
import sys
from pathlib import Path
import traceback
import psycopg2
from psycopg2.extras import RealDictCursor
import re
from typing import Optional, List, Dict, Any

# Telegram Bot
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes

# OpenAI
from openai import AsyncOpenAI

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
try:
    import PyPDF2
    import docx
    import ebooklib
    from ebooklib import epub
    from bs4 import BeautifulSoup
except ImportError as e:
    print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤ –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è.")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
try:
    from config import config
except ImportError:
    # Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    class Config:
        TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
        OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
        DATABASE_URL = os.getenv('DATABASE_URL')
        MODEL = "gpt-4o"
        MAX_TOKENS = 2000
        TEMPERATURE = 0.7
    
    config = Config()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class KnowledgeBase:
    """–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–Ω–∏–≥ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    
    def __init__(self, db_connection):
        self.db = db_connection
        self.books_processed = False
        logger.info("üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô")
        self.create_tables()
        
    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        try:
            with self.db.cursor() as cursor:
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS knowledge_base (
                        id SERIAL PRIMARY KEY,
                        book_name VARCHAR(255),
                        chapter VARCHAR(255),
                        content TEXT,
                        keywords TEXT,
                        category VARCHAR(100),
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                cursor.execute("""
                    CREATE INDEX IF NOT EXISTS idx_keywords 
                    ON knowledge_base USING gin(to_tsvector('russian', keywords))
                """)
                
                cursor.execute("""
                    CREATE INDEX IF NOT EXISTS idx_content 
                    ON knowledge_base USING gin(to_tsvector('russian', content))
                """)
                
                self.db.commit()
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")

    async def force_load_all_books(self):
        """–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–Ω–∏–≥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        logger.info("üöÄ –ù–ê–ß–ò–ù–ê–Æ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–£–Æ –û–ë–†–ê–ë–û–¢–ö–£ –ö–ù–ò–ì")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–Ω–∏–≥–∏ –≤ –±–∞–∑–µ
            book_count = await self.get_books_count()
            logger.info(f"üìä –í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π —É–∂–µ –µ—Å—Ç—å {book_count} –∑–∞–ø–∏—Å–µ–π")
            
            if book_count > 100:  # –ï—Å–ª–∏ –∫–Ω–∏–≥–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                logger.info("‚úÖ –ö–Ω–∏–≥–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Ä–∞–Ω–µ–µ")
                self.books_processed = True
                return
            
            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—É—Ç–∏ –ø–æ–∏—Å–∫–∞
            possible_paths = [
                "/app/books/",
                "./books/", 
                "/books/",
                "/app/",
                "./",
                os.path.join(os.getcwd(), "books"),
                os.path.join(os.path.dirname(__file__), "books")
            ]
            
            books_found = False
            
            for path in possible_paths:
                logger.info(f"üîç –ò—â—É –∫–Ω–∏–≥–∏ –≤: {path}")
                
                try:
                    if os.path.exists(path):
                        files = [f for f in os.listdir(path) if f.lower().endswith(('.pdf', '.txt', '.docx', '.epub'))]
                        
                        if files:
                            logger.info(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(files)} –∫–Ω–∏–≥ –≤ {path}")
                            books_found = True
                            
                            for file in files:
                                file_path = os.path.join(path, file)
                                logger.info(f"üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–Ω–∏–≥—É: {file}")
                                
                                try:
                                    await self.process_book(file_path, file)
                                    logger.info(f"‚úÖ –ö–Ω–∏–≥–∞ {file} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                                except Exception as e:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file}: {e}")
                            
                            break
                        else:
                            logger.info(f"üìÅ –ü–∞–ø–∫–∞ {path} –ø—É—Å—Ç–∞")
                    else:
                        logger.info(f"‚ùå –ü—É—Ç—å {path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {path}: {e}")
            
            if not books_found:
                logger.warning("‚ö†Ô∏è –ö–ù–ò–ì–ò –ù–ï –ù–ê–ô–î–ï–ù–´! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤")
            else:
                final_count = await self.get_books_count()
                logger.info(f"üéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê! –í –±–∞–∑–µ {final_count} –∑–∞–ø–∏—Å–µ–π")
                self.books_processed = True
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–∏–≥: {e}")
            logger.error(traceback.format_exc())

    async def get_books_count(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
        try:
            with self.db.cursor() as cursor:
                cursor.execute("SELECT COUNT(*) FROM knowledge_base")
                result = cursor.fetchone()
                return result[0] if result else 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π: {e}")
            return 0

    async def get_books_list(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥"""
        try:
            with self.db.cursor() as cursor:
                cursor.execute("SELECT DISTINCT book_name FROM knowledge_base")
                results = cursor.fetchall()
                return [row[0] for row in results]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥: {e}")
            return []

    async def process_book(self, file_path: str, filename: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –∫–Ω–∏–≥–∞
            with self.db.cursor() as cursor:
                cursor.execute("SELECT COUNT(*) FROM knowledge_base WHERE book_name = %s", (filename,))
                existing = cursor.fetchone()[0]
                
                if existing > 0:
                    logger.info(f"üìö –ö–Ω–∏–≥–∞ {filename} —É–∂–µ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π ({existing} –∑–∞–ø–∏—Å–µ–π)")
                    return
            
            text_content = ""
            
            if filename.lower().endswith('.pdf'):
                text_content = self.extract_from_pdf(file_path)
            elif filename.lower().endswith('.txt'):
                with open(file_path, 'r', encoding='utf-8') as f:
                    text_content = f.read()
            elif filename.lower().endswith('.docx'):
                text_content = self.extract_from_docx(file_path)
            elif filename.lower().endswith('.epub'):
                text_content = self.extract_from_epub(file_path)
            
            if text_content and len(text_content) > 100:
                await self.save_book_content(filename, text_content)
                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ {filename}")
            else:
                logger.warning(f"‚ö†Ô∏è –ú–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ {filename}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {filename}: {e}")

    def extract_from_pdf(self, file_path: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF"""
        try:
            with open(file_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                text = ""
                for page in pdf_reader.pages:
                    text += page.extract_text() + "\n"
                return text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PDF {file_path}: {e}")
            return ""

    def extract_from_docx(self, file_path: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX"""
        try:
            doc = docx.Document(file_path)
            text = ""
            for paragraph in doc.paragraphs:
                text += paragraph.text + "\n"
            return text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è DOCX {file_path}: {e}")
            return ""

    def extract_from_epub(self, file_path: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ EPUB (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π BeautifulSoup)"""
        try:
            book = epub.read_epub(file_path)
            text = ""
            for item in book.get_items():
                if item.get_type() == ebooklib.ITEM_DOCUMENT:
                    content = item.get_content().decode('utf-8')
                    # –ü—Ä–æ—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ HTML —Ç–µ–≥–æ–≤ –±–µ–∑ BeautifulSoup
                    import re
                    clean_text = re.sub(r'<[^>]+>', '', content)
                    text += clean_text + "\n"
            return text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è EPUB {file_path}: {e}")
            return ""

    async def save_book_content(self, book_name: str, content: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–Ω–∏–≥–∏ –≤ –±–∞–∑—É —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ ~1000 —Å–∏–º–≤–æ–ª–æ–≤
            chunk_size = 1000
            chunks = [content[i:i+chunk_size] for i in range(0, len(content), chunk_size)]
            
            saved_chunks = 0
            
            for i, chunk in enumerate(chunks):
                if len(chunk.strip()) > 50:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —á–∞—Å—Ç–∏
                    keywords = self.extract_keywords(chunk)
                    category = self.determine_category(chunk)
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
                    max_retries = 3
                    for attempt in range(max_retries):
                        try:
                            with self.db.cursor() as cursor:
                                cursor.execute("""
                                    INSERT INTO knowledge_base (book_name, chapter, content, keywords, category)
                                    VALUES (%s, %s, %s, %s, %s)
                                """, (book_name, f"–ß–∞—Å—Ç—å {i+1}", chunk, keywords, category))
                                self.db.commit()
                                saved_chunks += 1
                                break  # –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
                                
                        except Exception as e:
                            if attempt < max_retries - 1:
                                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å—Ç–∏ {i+1}, –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}: {e}")
                                # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ
                                try:
                                    self.db.close()
                                    if config.DATABASE_URL:
                                        self.db = psycopg2.connect(config.DATABASE_URL)
                                    await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                                except:
                                    pass
                            else:
                                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–∞—Å—Ç—å {i+1} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
            
            logger.info(f"üìö –ö–Ω–∏–≥–∞ {book_name} —Ä–∞–∑–±–∏—Ç–∞ –Ω–∞ {saved_chunks} —á–∞—Å—Ç–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–∏–≥–∏ {book_name}: {e}")

    def extract_keywords(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        keywords = []
        
        # –ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –õ–µ—Å–ª–∏
        lesli_terms = [
            '—Ñ—Ä–µ–π–º', '–¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ', '—Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏–µ', '–ø—É—à-–ø—É–ª', 
            '–∫–æ–∫–µ—Ç—Å—Ç–≤–æ', '—ç—Å–∫–∞–ª–∞—Ü–∏—è', '—Ç–µ—Å—Ç', '–æ—Ç–∫–∞–∑', '—Å–≤–∏–¥–∞–Ω–∏–µ', '–ø–µ—Ä–µ–ø–∏—Å–∫–∞',
            '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–∂–µ–Ω—â–∏–Ω–∞', '–º—É–∂—á–∏–Ω–∞', '–æ—Ç–Ω–æ—à–µ–Ω–∏—è', '—Å–µ–∫—Å', '—Å—Ç—Ä–∞—Å—Ç—å',
            '—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å', '—Ö–∞—Ä–∏–∑–º–∞', '—Å—Ç–∞—Ç—É—Å', '—Ü–µ–Ω–Ω–æ—Å—Ç—å', '–∏–Ω—Ç–µ—Ä–µ—Å', '—ç–º–æ—Ü–∏–∏'
        ]
        
        text_lower = text.lower()
        for term in lesli_terms:
            if term in text_lower:
                keywords.append(term)
        
        return ', '.join(keywords)

    def determine_category(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        text_lower = text.lower()
        
        if any(word in text_lower for word in ['—Å–≤–∏–¥–∞–Ω–∏–µ', '–≤—Å—Ç—Ä–µ—á–∞', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–∞—Ñ–µ']):
            return '—Å–≤–∏–¥–∞–Ω–∏—è'
        elif any(word in text_lower for word in ['–ø–µ—Ä–µ–ø–∏—Å–∫–∞', '—Å–æ–æ–±—â–µ–Ω–∏–µ', '—Ç–µ–∫—Å—Ç', '—á–∞—Ç']):
            return '–ø–µ—Ä–µ–ø–∏—Å–∫–∞'
        elif any(word in text_lower for word in ['–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '—Ç–∏–ø–∞–∂', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä', '–ª–∏—á–Ω–æ—Å—Ç—å']):
            return '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è'
        elif any(word in text_lower for word in ['—Å–µ–∫—Å', '–∏–Ω—Ç–∏–º–Ω–æ—Å—Ç—å', '–ø–æ—Å—Ç–µ–ª—å', '–±–ª–∏–∑–æ—Å—Ç—å']):
            return '–∏–Ω—Ç–∏–º–Ω–æ—Å—Ç—å'
        else:
            return '–æ–±—â–µ–µ'

    async def search_knowledge(self, query: str, limit: int = 3) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π —Å –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–´–ú —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º"""
        try:
            logger.info(f"üîç –ò—â—É –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: '{query}'")
            
            with self.db.cursor() as cursor:
                # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                cursor.execute("""
                    SELECT book_name, chapter, content, keywords, category
                    FROM knowledge_base 
                    WHERE to_tsvector('russian', keywords || ' ' || content) @@ plainto_tsquery('russian', %s)
                    ORDER BY ts_rank(to_tsvector('russian', keywords || ' ' || content), plainto_tsquery('russian', %s)) DESC
                    LIMIT %s
                """, (query, query, limit))
                
                results = cursor.fetchall()
                
                if not results:
                    # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–µ—Ç, –∏—â–µ–º –ø–æ –ø–æ—Ö–æ–∂–∏–º —Å–ª–æ–≤–∞–º
                    logger.info(f"üîç –¢–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–µ—Ç, –∏—â—É –ø–æ –ø–æ—Ö–æ–∂–∏–º —Å–ª–æ–≤–∞–º")
                    cursor.execute("""
                        SELECT book_name, chapter, content, keywords, category
                        FROM knowledge_base 
                        WHERE content ILIKE %s OR keywords ILIKE %s
                        LIMIT %s
                    """, (f'%{query}%', f'%{query}%', limit))
                    
                    results = cursor.fetchall()
                
                formatted_results = []
                for row in results:
                    formatted_results.append({
                        'book_name': row[0],
                        'chapter': row[1], 
                        'content': row[2][:500] + "..." if len(row[2]) > 500 else row[2],
                        'keywords': row[3],
                        'category': row[4]
                    })
                
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(formatted_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è '{query}'")
                return formatted_results
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {e}")
            return []

class ConversationMemory:
    """–ü–∞–º—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
    
    def __init__(self, db_connection):
        self.db = db_connection
        self.create_tables()
    
    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–∞–º—è—Ç–∏"""
        try:
            with self.db.cursor() as cursor:
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS conversations (
                        id SERIAL PRIMARY KEY,
                        user_id BIGINT,
                        role VARCHAR(50),
                        content TEXT,
                        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS user_stats (
                        id SERIAL PRIMARY KEY,
                        user_id BIGINT,
                        date DATE DEFAULT CURRENT_DATE,
                        interactions INTEGER DEFAULT 0,
                        approaches INTEGER DEFAULT 0,
                        dates INTEGER DEFAULT 0,
                        successes INTEGER DEFAULT 0
                    )
                """)
                
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS girl_profiles (
                        id SERIAL PRIMARY KEY,
                        user_id BIGINT,
                        girl_name VARCHAR(100),
                        age INTEGER,
                        psychotype VARCHAR(50),
                        attachment_style VARCHAR(50),
                        notes TEXT,
                        status VARCHAR(50),
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                self.db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ø–∞–º—è—Ç–∏: {e}")

    async def save_message(self, user_id: int, role: str, content: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            with self.db.cursor() as cursor:
                cursor.execute("""
                    INSERT INTO conversations (user_id, role, content)
                    VALUES (%s, %s, %s)
                """, (user_id, role, content))
                self.db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def get_recent_messages(self, user_id: int, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            with self.db.cursor() as cursor:
                cursor.execute("""
                    SELECT role, content, timestamp
                    FROM conversations 
                    WHERE user_id = %s 
                    ORDER BY timestamp DESC 
                    LIMIT %s
                """, (user_id, limit))
                
                messages = []
                for row in cursor.fetchall():
                    messages.append({
                        'role': row[0],
                        'content': row[1],
                        'timestamp': row[2]
                    })
                
                return list(reversed(messages))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []

class LesliAssistant:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ú –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    
    def __init__(self):
        self.setup_database()
        self.openai_client = AsyncOpenAI(api_key=config.OPENAI_API_KEY)
        self.knowledge = KnowledgeBase(self.db)
        self.memory = ConversationMemory(self.db)

    def setup_database(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å retry"""
        max_retries = 3
        for attempt in range(max_retries):
            try:
                if config.DATABASE_URL:
                    logger.info("üîó –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ PostgreSQL...")
                    self.db = psycopg2.connect(
                        config.DATABASE_URL,
                        connect_timeout=30,
                        keepalives_idle=30,
                        keepalives_interval=5,
                        keepalives_count=5
                    )
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º autocommit –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                    self.db.autocommit = True
                    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
                    return
                else:
                    logger.warning("‚ö†Ô∏è DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é SQLite")
                    # Fallback –∫ SQLite
                    db_path = "lesli_bot.db"
                    self.db = sqlite3.connect(db_path, check_same_thread=False)
                    logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
                    return
                    
            except Exception as e:
                if attempt < max_retries - 1:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}: {e}")
                    import time
                    time.sleep(2)
                else:
                    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
                    raise

    async def initialize_knowledge_base(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        logger.info("üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
        await self.knowledge.force_load_all_books()

    async def get_debug_info(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        try:
            books_count = await self.knowledge.get_books_count()
            books_list = await self.knowledge.get_books_list()
            
            debug_info = f"""
üîç **–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {books_count}
‚Ä¢ –ö–Ω–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(books_list)}
‚Ä¢ –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {'‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞' if self.knowledge.books_processed else '‚ùå –ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'}

üìö **–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:**
"""
            
            for i, book in enumerate(books_list, 1):
                debug_info += f"\n{i}. {book}"
            
            if books_count == 0:
                debug_info += "\n\n‚ö†Ô∏è **–ü–†–û–ë–õ–ï–ú–ê:** –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞!"
            
            return debug_info
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}"

    async def get_gpt_response(self, messages: List[Dict], user_id: int, query: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT —Å –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ú –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        try:
            # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—â–µ–º –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –õ–µ—Å–ª–∏
            knowledge_results = await self.knowledge.search_knowledge(query, limit=3)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
            system_prompt = self.create_enhanced_system_prompt(knowledge_results, user_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            enhanced_messages = [{"role": "system", "content": system_prompt}] + messages
            
            response = await self.openai_client.chat.completions.create(
                model=config.MODEL,
                messages=enhanced_messages,
                max_tokens=config.MAX_TOKENS,
                temperature=config.TEMPERATURE
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞."

    def create_enhanced_system_prompt(self, knowledge_results: List[Dict], user_id: int) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π"""
        base_prompt = """–¢—ã LESLI45BOT - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—é, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –∫–Ω–∏–≥–∞—Ö –ê–ª–µ–∫—Å–∞ –õ–µ—Å–ª–∏.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –≤ –∫–∞–∂–¥–æ–º –æ—Ç–≤–µ—Ç–µ!

–¢–í–û–Ø –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô –ò–ó –ö–ù–ò–ì –õ–ï–°–õ–ò:"""
        
        if knowledge_results:
            base_prompt += "\n\nüìö –†–ï–õ–ï–í–ê–ù–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ö–ù–ò–ì:\n"
            for i, result in enumerate(knowledge_results, 1):
                base_prompt += f"\n{i}. –ò–∑ –∫–Ω–∏–≥–∏ '{result['book_name']}':\n{result['content']}\n"
        else:
            base_prompt += "\n\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞!"
        
        base_prompt += """

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –í–°–ï–ì–î–ê —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–Ω–∏–≥–∏ –∏ —Ç–µ—Ö–Ω–∏–∫–∏ –õ–µ—Å–ª–∏
- –¶–∏—Ç–∏—Ä—É–π –æ—Ç—Ä—ã–≤–∫–∏ –∏–∑ –∫–Ω–∏–≥ –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ  
- –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, –∞ –Ω–µ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –õ–µ—Å–ª–∏ (—Ñ—Ä–µ–π–º—ã, –ø—É—à-–ø—É–ª, —ç—Å–∫–∞–ª–∞—Ü–∏—è, etc.)
- –ï—Å–ª–∏ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞ - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–ø–æ–º—è–Ω–∏ —ç—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ

–°—Ç–∏–ª—å: –£–≤–µ—Ä–µ–Ω–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, –ø—Ä—è–º–æ–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –∫–Ω–∏–≥."""
        
        return base_prompt

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –º–µ–Ω—é (–û–°–¢–ê–í–õ–Ø–ï–ú –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
def create_main_menu_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        # –ê–Ω–∞–ª–∏–∑
        [InlineKeyboardButton("üß† –ö–µ–π—Å", callback_data="menu_keis"),
         InlineKeyboardButton("üí¨ –ü–µ—Ä–µ–ø–∏—Å–∫–∞", callback_data="menu_perepiska")],
        [InlineKeyboardButton("üí° –û—Ç–≤–µ—Ç", callback_data="menu_otvet"),
         InlineKeyboardButton("üì∏ –°–∫—Ä–∏–Ω", callback_data="menu_skrin")],
        
        # –°–≤–∏–¥–∞–Ω–∏—è
        [InlineKeyboardButton("ü•Ç –°–≤–∏–¥–∞–Ω–∏–µ 1", callback_data="menu_svidanie1"),
         InlineKeyboardButton("üíë –°–≤–∏–¥–∞–Ω–∏–µ 2", callback_data="menu_svidanie2")],
        [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ 1", callback_data="menu_analiz1"),
         InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏–∑ 2", callback_data="menu_analiz2")],
        
        # –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        [InlineKeyboardButton("üÜò SOS –°–∏–≥–Ω–∞–ª—ã", callback_data="menu_sos"),
         InlineKeyboardButton("üé≠ –°—Ç–∏–ª–∏ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—è", callback_data="menu_styles")],
        [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏–∏", callback_data="menu_stories"),
         InlineKeyboardButton("üí° –°–∏–≥–Ω–∞–ª—ã –∏–Ω—Ç–µ—Ä–µ—Å–∞", callback_data="menu_signals")],
        [InlineKeyboardButton("üë© –¢–∏–ø–∞–∂–∏ –¥–µ–≤—É—à–µ–∫", callback_data="menu_types"),
         InlineKeyboardButton("üí¨ –¢–µ–º—ã –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏–π", callback_data="menu_topics")],
        
        # –ó–Ω–∞–Ω–∏—è
        [InlineKeyboardButton("üß¨ –ü—Å–∏—Ö–æ—Ç–∏–ø", callback_data="menu_psihotip"),
         InlineKeyboardButton("üìö –ó–Ω–∞–Ω–∏–µ", callback_data="menu_znanie")],
        [InlineKeyboardButton("üî¨ –ù–∞—É–∫–∞", callback_data="menu_nauka"),
         InlineKeyboardButton("üë®‚Äçüè´ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫", callback_data="menu_nastavnik")]
    ]
    
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.effective_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    await assistant.memory.save_message(user_id, "user", "/start")
    
    welcome_text = """
üî• **LESLI45BOT 2.0 - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—é**

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø —Ç–≤–æ–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –∫–Ω–∏–≥–∞—Ö –∏ –º–µ—Ç–æ–¥–∏–∫–∞—Ö –ê–ª–µ–∫—Å–∞ –õ–µ—Å–ª–∏.

üß† **–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–µ–π—Å–æ–≤ –∏ —Å–∏—Ç—É–∞—Ü–∏–π
‚Ä¢ –†–∞–∑–±–æ—Ä –ø–µ—Ä–µ–ø–∏—Å–æ–∫ —Å –¥–µ–≤—É—à–∫–∞–º–∏  
‚Ä¢ –ò–ò-–∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –¥–µ–≤—É—à–µ–∫
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ–¥ —Ç–≤–æ–π —Å—Ç–∏–ª—å
‚Ä¢ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∏–∑ 9 –∫–Ω–∏–≥ –õ–µ—Å–ª–∏
‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –Ω–∞—à–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤

üìö **–í –º–æ–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:**
‚úÖ –í—Å–µ –∫–Ω–∏–≥–∏ –ê–ª–µ–∫—Å–∞ –õ–µ—Å–ª–∏
‚úÖ –¢–µ—Ö–Ω–∏–∫–∏ –∏ —Ñ—Ä–µ–π–º—ã —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—è
‚úÖ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –∂–µ–Ω—â–∏–Ω
‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–≤–∏–¥–∞–Ω–∏–π

–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–µ–Ω—é ‚¨áÔ∏è
"""
    
    await update.message.reply_text(
        welcome_text,
        parse_mode='Markdown',
        reply_markup=create_main_menu_keyboard()
    )

async def debug_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /debug - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    user_id = update.effective_user.id
    
    await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π...")
    
    debug_info = await assistant.get_debug_info()
    
    await assistant.memory.save_message(user_id, "user", "/debug")
    await assistant.memory.save_message(user_id, "assistant", debug_info)
    
    await update.message.reply_text(debug_info, parse_mode='Markdown')

async def reload_books_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /reload_books - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥"""
    user_id = update.effective_user.id
    
    await update.message.reply_text("üìö –ù–∞—á–∏–Ω–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∫–Ω–∏–≥...")
    
    try:
        await assistant.knowledge.force_load_all_books()
        
        books_count = await assistant.knowledge.get_books_count()
        books_list = await assistant.knowledge.get_books_list()
        
        result_text = f"""
‚úÖ **–ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!**

üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç:**
‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {books_count}
‚Ä¢ –ö–Ω–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(books_list)}

üìö **–ö–Ω–∏–≥–∏:**
"""
        
        for i, book in enumerate(books_list, 1):
            result_text += f"\n{i}. {book}"
        
        await assistant.memory.save_message(user_id, "user", "/reload_books")
        await assistant.memory.save_message(user_id, "assistant", result_text)
        
        await update.message.reply_text(result_text, parse_mode='Markdown')
        
    except Exception as e:
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}"
        await update.message.reply_text(error_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    message_text = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await assistant.memory.save_message(user_id, "user", message_text)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    recent_messages = await assistant.memory.get_recent_messages(user_id, limit=10)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT
    messages = []
    for msg in recent_messages:
        role = "user" if msg['role'] == "user" else "assistant"
        messages.append({"role": role, "content": msg['content']})
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    response = await assistant.get_gpt_response(messages, user_id, message_text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    await assistant.memory.save_message(user_id, "assistant", response)
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ"""
    user_id = update.effective_user.id
    
    try:
        photo = update.message.photo[-1]
        photo_file = await context.bot.get_file(photo.file_id)
        photo_url = photo_file.file_path
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ GPT-4 Vision
        analysis = "–§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–º."
        
        await assistant.memory.save_message(user_id, "user", "[–û—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞]")
        await assistant.memory.save_message(user_id, "assistant", analysis)
        
        await update.message.reply_text(
            f"üì∏ **–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ:**\n\n{analysis}",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ.")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    menu_type = query.data.replace("menu_", "")
    user_id = query.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await assistant.memory.save_message(user_id, "user", f"–ù–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {menu_type}")
    
    try:
        if menu_type == "keis":
            await query.edit_message_text(
                "üß† **–ê–Ω–∞–ª–∏–∑ –∫–µ–π—Å–∞**\n\n"
                "–û–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é —Å –¥–µ–≤—É—à–∫–æ–π, –∏ —è –¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏ –∏–∑ –∫–Ω–∏–≥ –õ–µ—Å–ª–∏.\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "*–ü–æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å –ê–Ω–Ω–æ–π, 28 –ª–µ—Ç, –≤ –∫–ª—É–±–µ. –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º—Å—è 3 –¥–Ω—è, –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π...*",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_back")
                ]])
            )
            
        elif menu_type == "perepiska":
            await query.edit_message_text(
                "üí¨ **–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏**\n\n"
                "–ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –¥–µ–≤—É—à–∫–æ–π –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.\n\n"
                "–Ø –æ–ø—Ä–µ–¥–µ–ª—é:\n"
                "‚Ä¢ –ï—ë –ø—Å–∏—Ö–æ—Ç–∏–ø –∏ —Ç–∏–ø –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏\n"
                "‚Ä¢ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–Ω—Ç–µ—Ä–µ—Å–∞\n"
                "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_back")
                ]])
            )
            
        elif menu_type == "styles":
            styles_keyboard = [
                [InlineKeyboardButton("üëë –ú–∞—Å—Ç–µ—Ä", callback_data="style_master"),
                 InlineKeyboardButton("üé≠ –ê—Ä—Ç–∏—Å—Ç", callback_data="style_artist")],
                [InlineKeyboardButton("üíº –î–µ–ª–æ–≤–æ–π", callback_data="style_business"),
                 InlineKeyboardButton("üèÉ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π", callback_data="style_sport")],
                [InlineKeyboardButton("üé® –¢–≤–æ—Ä—á–µ—Å–∫–∏–π", callback_data="style_creative"),
                 InlineKeyboardButton("üòé –ü–ª–æ—Ö–æ–π –ø–∞—Ä–µ–Ω—å", callback_data="style_badboy")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_back")]
            ]
            
            await query.edit_message_text(
                "üé≠ **–°—Ç–∏–ª–∏ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—è**\n\n"
                "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Å—Ç–∏–ª—å –∏–ª–∏ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –æ—Å–≤–æ–∏—Ç—å:\n\n"
                "üëë **–ú–∞—Å—Ç–µ—Ä** - –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å\n"
                "üé≠ **–ê—Ä—Ç–∏—Å—Ç** - —Ö–∞—Ä–∏–∑–º–∞ –∏ —ç–º–æ—Ü–∏–∏\n"
                "üíº **–î–µ–ª–æ–≤–æ–π** - —Å—Ç–∞—Ç—É—Å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å\n"
                "üèÉ **–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π** - —ç–Ω–µ—Ä–≥–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
                "üé® **–¢–≤–æ—Ä—á–µ—Å–∫–∏–π** - –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –≥–ª—É–±–∏–Ω–∞\n"
                "üòé **–ü–ª–æ—Ö–æ–π –ø–∞—Ä–µ–Ω—å** - –¥–µ—Ä–∑–æ—Å—Ç—å –∏ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(styles_keyboard)
            )
            
        elif menu_type == "types":
            types_keyboard = [
                [InlineKeyboardButton("‚ù§Ô∏è –ß—É–≤—Å—Ç–≤–µ–Ω–Ω–∞—è", callback_data="type_sensual"),
                 InlineKeyboardButton("üß† –†–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è", callback_data="type_rational")],
                [InlineKeyboardButton("üò∞ –¢—Ä–µ–≤–æ–∂–Ω–∞—è", callback_data="type_anxious"),
                 InlineKeyboardButton("üèÉ‚Äç‚ôÄÔ∏è –ò–∑–±–µ–≥–∞—é—â–∞—è", callback_data="type_avoidant")],
                [InlineKeyboardButton("üåü –ù–∞–¥–µ–∂–Ω–∞—è", callback_data="type_secure"),
                 InlineKeyboardButton("üëë –î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è", callback_data="type_dominant")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_back")]
            ]
            
            await query.edit_message_text(
                "üë© **–¢–∏–ø–∞–∂–∏ –¥–µ–≤—É—à–µ–∫**\n\n"
                "–í—ã–±–µ—Ä–∏ —Ç–∏–ø–∞–∂ –¥–µ–≤—É—à–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤:\n\n"
                "‚ù§Ô∏è **–ß—É–≤—Å—Ç–≤–µ–Ω–Ω–∞—è** - —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è, –∂–∏–≤–∞—è\n"
                "üß† **–†–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è** - –ª–æ–≥–∏—á–Ω–∞—è, –ø—Ä–∞–∫—Ç–∏—á–Ω–∞—è\n"
                "üò∞ **–¢—Ä–µ–≤–æ–∂–Ω–∞—è** - –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏\n"
                "üèÉ‚Äç‚ôÄÔ∏è **–ò–∑–±–µ–≥–∞—é—â–∞—è** - –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è, –¥–∏—Å—Ç–∞–Ω—Ç–Ω–∞—è\n"
                "üåü **–ù–∞–¥–µ–∂–Ω–∞—è** - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è, –æ—Ç–∫—Ä—ã—Ç–∞—è\n"
                "üëë **–î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è** - —Å–∏–ª—å–Ω–∞—è, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∞—è",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(types_keyboard)
            )
            
        elif menu_type == "signals":
            signals_keyboard = [
                [InlineKeyboardButton("üí¨ –í –ø–µ—Ä–µ–ø–∏—Å–∫–µ", callback_data="signals_text"),
                 InlineKeyboardButton("üëÄ –ù–∞ —Å–≤–∏–¥–∞–Ω–∏–∏", callback_data="signals_date")],
                [InlineKeyboardButton("üì± –í —Å–æ—Ü—Å–µ—Ç—è—Ö", callback_data="signals_social"),
                 InlineKeyboardButton("üé™ –í –∫–ª—É–±–µ", callback_data="signals_club")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_back")]
            ]
            
            await query.edit_message_text(
                "üí° **–°–∏–≥–Ω–∞–ª—ã –∏–Ω—Ç–µ—Ä–µ—Å–∞**\n\n"
                "–ì–¥–µ —Ö–æ—á–µ—à—å –Ω–∞—É—á–∏—Ç—å—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –∏–Ω—Ç–µ—Ä–µ—Å–∞?\n\n"
                "üí¨ **–í –ø–µ—Ä–µ–ø–∏—Å–∫–µ** - —ç–º–æ–¥–∑–∏, –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–æ–≤, –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                "üëÄ **–ù–∞ —Å–≤–∏–¥–∞–Ω–∏–∏** - —è–∑—ã–∫ —Ç–µ–ª–∞, –≤–∑–≥–ª—è–¥—ã, –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏—è\n"
                "üì± **–í —Å–æ—Ü—Å–µ—Ç—è—Ö** - –ª–∞–π–∫–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏—Å—Ç–æ—Ä–∏–π\n"
                "üé™ **–í –∫–ª—É–±–µ** - —Ç–∞–Ω—Ü—ã, –≤–∑–≥–ª—è–¥—ã, –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(signals_keyboard)
            )
            
        elif menu_type == "sos":
            await query.edit_message_text(
                "üÜò **SOS –°–∏–≥–Ω–∞–ª—ã**\n\n"
                "–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ—à–µ–Ω–∏–π!\n\n"
                "–û–ø–∏—à–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é:\n"
                "‚Ä¢ –î–µ–≤—É—à–∫–∞ –≤–Ω–µ–∑–∞–ø–Ω–æ –æ—Ö–ª–∞–¥–µ–ª–∞\n"
                "‚Ä¢ –°–ª–æ–∂–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–∏\n"
                "‚Ä¢ –ù–µ–ø–æ–Ω—è—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ\n"
                "‚Ä¢ –ù—É–∂–µ–Ω —Å—Ä–æ—á–Ω—ã–π —Å–æ–≤–µ—Ç\n\n"
                "–Ø –¥–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –∞—Ä—Å–µ–Ω–∞–ª–∞ –õ–µ—Å–ª–∏!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_back")
                ]])
            )
            
        elif menu_type == "stories":
            await query.edit_message_text(
                "üìñ **–ò—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞**\n\n"
                "–•–æ—á–µ—à—å —É—Å–ª—ã—à–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏ –õ–µ—Å–ª–∏?\n\n"
                "–ù–∞–ø–∏—à–∏ —Ç–∏–ø —Å–∏—Ç—É–∞—Ü–∏–∏:\n"
                "‚Ä¢ –ü–µ—Ä–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ\n"
                "‚Ä¢ –ü—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è\n"
                "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏\n"
                "‚Ä¢ –°–ª–æ–∂–Ω—ã–µ –∫–µ–π—Å—ã\n\n"
                "–Ø —Ä–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ö–æ–¥—è—â—É—é –∏—Å—Ç–æ—Ä–∏—é —Å —Ä–∞–∑–±–æ—Ä–æ–º —Ç–µ—Ö–Ω–∏–∫!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_back")
                ]])
            )
            
        elif menu_type == "topics":
            topics_keyboard = [
                [InlineKeyboardButton("‚òï –ü–µ—Ä–≤–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ", callback_data="topic_first"),
                 InlineKeyboardButton("üç∑ –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ", callback_data="topic_romantic")],
                [InlineKeyboardButton("üé¨ –ê–∫—Ç–∏–≤–Ω–æ–µ", callback_data="topic_active"),
                 InlineKeyboardButton("üè† –î–æ–º–∞—à–Ω–µ–µ", callback_data="topic_home")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_back")]
            ]
            
            await query.edit_message_text(
                "üí¨ **–¢–µ–º—ã –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏–π**\n\n"
                "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å–≤–∏–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã—Ö —Ç–µ–º –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n\n"
                "‚òï **–ü–µ—Ä–≤–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ** - –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞\n"
                "üç∑ **–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ** - –≥–ª—É–±–æ–∫–∏–µ, –∏–Ω—Ç–∏–º–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã\n"
                "üé¨ **–ê–∫—Ç–∏–≤–Ω–æ–µ** - –ª–µ–≥–∫–∏–µ —Ç–µ–º—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π\n"
                "üè† **–î–æ–º–∞—à–Ω–µ–µ** - —É—é—Ç–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –¥–æ–º–∞",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(topics_keyboard)
            )
            
        elif menu_type.startswith("style_"):
            style_name = menu_type.replace("style_", "")
            response = await assistant.get_gpt_response([
                {"role": "user", "content": f"–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ —Å—Ç–∏–ª—å —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—è '{style_name}' –∏–∑ –∫–Ω–∏–≥ –õ–µ—Å–ª–∏"}
            ], user_id, f"—Å—Ç–∏–ª—å {style_name}")
            
            await query.edit_message_text(
                response,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_styles")
                ]])
            )
            
        elif menu_type.startswith("type_"):
            type_name = menu_type.replace("type_", "")
            response = await assistant.get_gpt_response([
                {"role": "user", "content": f"–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–µ–≤—É—à–∫–æ–π —Ç–∏–ø–∞ '{type_name}' —Å–æ–≥–ª–∞—Å–Ω–æ –º–µ—Ç–æ–¥–∞–º –õ–µ—Å–ª–∏?"}
            ], user_id, f"—Ç–∏–ø–∞–∂ {type_name}")
            
            await query.edit_message_text(
                response,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_types")
                ]])
            )
            
        elif menu_type == "back":
            await show_main_menu(query, context)
            
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ - –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            response = await assistant.get_gpt_response([
                {"role": "user", "content": f"–ü–æ–º–æ–≥–∏ —Å —Ç–µ–º–æ–π: {menu_type}"}
            ], user_id, menu_type)
            
            await query.edit_message_text(
                response,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_back")
                ]])
            )
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        await assistant.memory.save_message(user_id, "assistant", f"–ü–æ–∫–∞–∑–∞–ª –º–µ–Ω—é: {menu_type}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {menu_type}: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back")
            ]])
        )

async def show_main_menu(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    menu_text = """
üî• **LESLI45BOT 2.0 - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**

–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:

üß† **–ê–Ω–∞–ª–∏–∑** - —Ä–∞–∑–±–æ—Ä —Å–∏—Ç—É–∞—Ü–∏–π –∏ –∫–µ–π—Å–æ–≤
üí¨ **–û–±—â–µ–Ω–∏–µ** - –ø–æ–º–æ—â—å —Å –ø–µ—Ä–µ–ø–∏—Å–∫–æ–π –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º–∏
ü•Ç **–°–≤–∏–¥–∞–Ω–∏—è** - –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ –≤—Å—Ç—Ä–µ—á
üÜò **–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å** - –±—ã—Å—Ç—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è
üë© **–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è** - —Ç–∏–ø–∞–∂–∏ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–µ–≤—É—à–µ–∫
üìö **–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π** - —Ç–µ–æ—Ä–∏—è –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞ –õ–µ—Å–ª–∏

**–ö–æ–º–∞–Ω–¥—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:**
/debug - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
/reload_books - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–∏–≥–∏
"""
    
    if hasattr(update_or_query, 'edit_message_text'):
        await update_or_query.edit_message_text(
            menu_text,
            parse_mode='Markdown',
            reply_markup=create_main_menu_keyboard()
        )
    else:
        await update_or_query.message.reply_text(
            menu_text,
            parse_mode='Markdown',
            reply_markup=create_main_menu_keyboard()
        )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global assistant
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
        if not config.TELEGRAM_TOKEN:
            logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        if not config.OPENAI_API_KEY:
            logger.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é LESLI45BOT 2.0...")
        
        # –°–æ–∑–¥–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        assistant = LesliAssistant()
        logger.info("‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        await assistant.initialize_knowledge_base()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(config.TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("debug", debug_command))
        application.add_handler(CommandHandler("reload_books", reload_books_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        application.add_handler(CallbackQueryHandler(handle_callback))
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("üéâ LESLI45BOT 2.0 –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        logger.error(traceback.format_exc())

if __name__ == '__main__':
    asyncio.run(main())

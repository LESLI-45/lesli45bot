#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
LESLI45BOT - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π Telegram-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—é
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ GPT-4o —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –∏–∑ –∫–Ω–∏–≥ –ê–ª–µ–∫—Å–∞ –õ–µ—Å–ª–∏
TELEBOT VERSION - –ø—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è
"""

import asyncio
import logging
import os
import sys
import traceback
import threading
import time
from typing import Optional, List, Dict, Any

# Telegram Bot API (–ø—Ä–æ—Å—Ç–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞)
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message

# OpenAI API
from openai import AsyncOpenAI

# Database
import asyncpg
import sqlite3

# File processing
import PyPDF2
import docx
import ebooklib
from ebooklib import epub
from io import BytesIO
import re

# Image processing
from PIL import Image
import base64
import requests

# Configuration
class Config:
    def __init__(self):
        self.TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
        self.OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
        self.DATABASE_URL = os.getenv('DATABASE_URL')
        self.MODEL = "gpt-4o"
        self.MAX_TOKENS = 2000
        self.TEMPERATURE = 0.7

config = Config()

# Logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(config.TELEGRAM_TOKEN)

class LesliAssistant:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –±–æ—Ç–∞-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.openai_client = AsyncOpenAI(api_key=config.OPENAI_API_KEY)
        self.db = None
        self.initialize_database()
    
    def initialize_database(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if config.DATABASE_URL and config.DATABASE_URL.startswith('postgresql'):
                logger.info("üîó –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ PostgreSQL...")
                # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                self.db = loop.run_until_complete(asyncpg.connect(config.DATABASE_URL))
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.info("üîó –ò—Å–ø–æ–ª—å–∑—É—é SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                self.db = sqlite3.connect('lesli_bot.db', check_same_thread=False)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            # Fallback –∫ SQLite
            self.db = sqlite3.connect('lesli_bot.db', check_same_thread=False)
    
    def get_gpt_response_sync(self, messages: List[Dict]) -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT"""
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                response = loop.run_until_complete(self.openai_client.chat.completions.create(
                    model=config.MODEL,
                    messages=messages,
                    max_tokens=config.MAX_TOKENS,
                    temperature=config.TEMPERATURE
                ))
                return response.choices[0].message.content
            finally:
                loop.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    def process_message(self, user_message: str, user_id: int) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            system_prompt = """–¢—ã LESLI45BOT - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–æ–¥–æ–≤ –ê–ª–µ–∫—Å–∞ –õ–µ—Å–ª–∏.

–¢–í–û–ò –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò:
üéØ –ê–Ω–∞–ª–∏–∑ –∫–µ–π—Å–æ–≤ –∏ —Å–∏—Ç—É–∞—Ü–∏–π
üí¨ –ü–æ–º–æ—â—å —Å –ø–µ—Ä–µ–ø–∏—Å–∫–æ–π
ü•Ç –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏–π
üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
üÜò SOS —Ç–µ—Ö–Ω–∏–∫–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è
üé≠ –°—Ç–∏–ª–∏ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—è (–ü–æ–¥–æ–Ω–æ–∫, –†–æ–º–∞–Ω—Ç–∏–∫, –ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä, –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π, –ú–∞—Å—Ç–µ—Ä)
üë© –†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–∂–∞–º–∏ –¥–µ–≤—É—à–µ–∫
üí° –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–Ω—Ç–µ—Ä–µ—Å–∞
üìñ –°–æ–∑–¥–∞–Ω–∏–µ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π
üí¨ –¢–µ–º—ã –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Å–≤–∏–¥–∞–Ω–∏–π

–ü–†–ò–ù–¶–ò–ü–´ –†–ê–ë–û–¢–´:
- –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–æ–¥—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑ –∫–Ω–∏–≥ –õ–µ—Å–ª–∏
- –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
- –£—á–∏—Ç—ã–≤–∞–π –ø—Å–∏—Ö–æ—Ç–∏–ø –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–∏—Ç—É–∞—Ü–∏–∏
- –ë—É–¥—å –ø—Ä—è–º—ã–º –∏ —á–µ—Å—Ç–Ω—ã–º
- –ü–æ–º–Ω–∏ –æ —Å–æ–≥–ª–∞—Å–∏–∏ –∏ —ç—Ç–∏–∫–µ

–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ - –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏."""

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è GPT
            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ]
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            response = self.get_gpt_response_sync(messages)
            return response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
assistant = LesliAssistant()

def create_main_menu_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup()
    
    # –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
    keyboard.row(
        InlineKeyboardButton("üß† –ö–µ–π—Å", callback_data="menu_keis"),
        InlineKeyboardButton("üí¨ –ü–µ—Ä–µ–ø–∏—Å–∫–∞", callback_data="menu_perepiska")
    )
    keyboard.row(
        InlineKeyboardButton("üí° –û—Ç–≤–µ—Ç", callback_data="menu_otvet"),
        InlineKeyboardButton("üì∏ –°–∫—Ä–∏–Ω", callback_data="menu_skrin")
    )
    
    # –°–≤–∏–¥–∞–Ω–∏—è
    keyboard.row(
        InlineKeyboardButton("ü•Ç –°–≤–∏–¥–∞–Ω–∏–µ 1", callback_data="menu_svidanie1"),
        InlineKeyboardButton("üíë –°–≤–∏–¥–∞–Ω–∏–µ 2", callback_data="menu_svidanie2")
    )
    keyboard.row(
        InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ 1", callback_data="menu_analiz1"),
        InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏–∑ 2", callback_data="menu_analiz2")
    )
    
    # –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    keyboard.row(
        InlineKeyboardButton("üÜò SOS –°–∏–≥–Ω–∞–ª—ã", callback_data="menu_sos"),
        InlineKeyboardButton("üé≠ –°—Ç–∏–ª–∏ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—è", callback_data="menu_styles")
    )
    keyboard.row(
        InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏–∏", callback_data="menu_stories"),
        InlineKeyboardButton("üí° –°–∏–≥–Ω–∞–ª—ã –∏–Ω—Ç–µ—Ä–µ—Å–∞", callback_data="menu_signals")
    )
    keyboard.row(
        InlineKeyboardButton("üë© –¢–∏–ø–∞–∂–∏ –¥–µ–≤—É—à–µ–∫", callback_data="menu_types"),
        InlineKeyboardButton("üí¨ –¢–µ–º—ã –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏–π", callback_data="menu_topics")
    )
    
    # –ó–Ω–∞–Ω–∏—è
    keyboard.row(
        InlineKeyboardButton("üß¨ –ü—Å–∏—Ö–æ—Ç–∏–ø", callback_data="menu_psihotip"),
        InlineKeyboardButton("üìö –ó–Ω–∞–Ω–∏–µ", callback_data="menu_znanie")
    )
    keyboard.row(
        InlineKeyboardButton("üî¨ –ù–∞—É–∫–∞", callback_data="menu_nauka"),
        InlineKeyboardButton("üë®‚Äçüè´ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫", callback_data="menu_nastavnik")
    )
    
    return keyboard

def show_main_menu(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"""
    menu_text = """üî• **LESLI45BOT 2.0 - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**

–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:

üß† **–ê–Ω–∞–ª–∏–∑** - —Ä–∞–∑–±–æ—Ä —Å–∏—Ç—É–∞—Ü–∏–π –∏ –∫–µ–π—Å–æ–≤
üí¨ **–û–±—â–µ–Ω–∏–µ** - –ø–æ–º–æ—â—å —Å –ø–µ—Ä–µ–ø–∏—Å–∫–æ–π –∏ –æ—Ç–≤–µ—Ç–∞–º–∏
ü•Ç **–°–≤–∏–¥–∞–Ω–∏—è** - —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á
üÜò **SOS** - —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –≤–ª–∏—è–Ω–∏—è
üé≠ **–°—Ç–∏–ª–∏** - –º–µ—Ç–æ–¥—ã —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—è
üë© **–¢–∏–ø–∞–∂–∏** - —Ä–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–µ–≤—É—à–∫–∞–º–∏
üß¨ **–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è** - –Ω–∞—É—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º! üëá"""
    
    try:
        bot.send_message(
            message.chat.id,
            menu_text,
            reply_markup=create_main_menu_keyboard(),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é: {e}")

@bot.message_handler(commands=['start'])
def start_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    show_main_menu(message)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    try:
        menu_type = call.data.replace("menu_", "")
        user_id = call.from_user.id
        
        if menu_type == "keis":
            text = "üß† **–ê–Ω–∞–ª–∏–∑ –∫–µ–π—Å–∞**\n\n–û–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é —Å –¥–µ–≤—É—à–∫–æ–π –∏ —á—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ - –¥–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã!"
            bot.edit_message_text(
                text,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode='Markdown'
            )
        elif menu_type == "perepiska":
            text = "üí¨ **–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏**\n\n–ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏–ª–∏ –æ–ø–∏—à–∏ –¥–∏–∞–ª–æ–≥ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ç–µ—Ä–µ—Å –¥–µ–≤—É—à–∫–∏!"
            bot.edit_message_text(
                text,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode='Markdown'
            )
        elif menu_type == "otvet":
            text = "üí° **–ü–æ–º–æ—â—å —Å –æ—Ç–≤–µ—Ç–æ–º**\n\n–û–ø–∏—à–∏ —á—Ç–æ –æ–Ω–∞ –Ω–∞–ø–∏—Å–∞–ª–∞ - –¥–∞–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤!"
            bot.edit_message_text(
                text,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode='Markdown'
            )
        elif menu_type == "styles":
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üòà –ü–æ–¥–æ–Ω–æ–∫", callback_data="style_podonok"))
            keyboard.add(InlineKeyboardButton("üåπ –†–æ–º–∞–Ω—Ç–∏–∫", callback_data="style_romantic"))
            keyboard.add(InlineKeyboardButton("üî• –ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä", callback_data="style_provokator"))
            keyboard.add(InlineKeyboardButton("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π", callback_data="style_structural"))
            keyboard.add(InlineKeyboardButton("üëë –ú–∞—Å—Ç–µ—Ä", callback_data="style_master"))
            keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main"))
            
            text = "üé≠ **–°—Ç–∏–ª–∏ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—è**\n\n–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è!"
            bot.edit_message_text(
                text,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        elif menu_type == "types":
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üë∏ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∞—è", callback_data="type_control"))
            keyboard.add(InlineKeyboardButton("üî• –ß—É–≤—Å—Ç–≤–µ–Ω–Ω–∞—è", callback_data="type_sensual"))
            keyboard.add(InlineKeyboardButton("üé≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è", callback_data="type_emotional"))
            keyboard.add(InlineKeyboardButton("üåô –ó–∞–º–∫–Ω—É—Ç–∞—è", callback_data="type_closed"))
            keyboard.add(InlineKeyboardButton("üå∏ –ú–æ–ª–æ–¥—ã–µ", callback_data="type_young"))
            keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main"))
            
            text = "üë© **–¢–∏–ø–∞–∂–∏ –¥–µ–≤—É—à–µ–∫**\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è!"
            bot.edit_message_text(
                text,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        elif menu_type == "znanie":
            text = "üìö **–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π**\n\n–°–ø—Ä–æ—Å–∏ –æ –ª—é–±–æ–π —Ç–µ—Ö–Ω–∏–∫–µ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—è –∏–∑ –∫–Ω–∏–≥ –õ–µ—Å–ª–∏!"
            bot.edit_message_text(
                text,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode='Markdown'
            )
        elif menu_type == "main":
            menu_text = """üî• **LESLI45BOT 2.0 - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**

–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:

üß† **–ê–Ω–∞–ª–∏–∑** - —Ä–∞–∑–±–æ—Ä —Å–∏—Ç—É–∞—Ü–∏–π –∏ –∫–µ–π—Å–æ–≤
üí¨ **–û–±—â–µ–Ω–∏–µ** - –ø–æ–º–æ—â—å —Å –ø–µ—Ä–µ–ø–∏—Å–∫–æ–π –∏ –æ—Ç–≤–µ—Ç–∞–º–∏
ü•Ç **–°–≤–∏–¥–∞–Ω–∏—è** - —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á
üÜò **SOS** - —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –≤–ª–∏—è–Ω–∏—è
üé≠ **–°—Ç–∏–ª–∏** - –º–µ—Ç–æ–¥—ã —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—è
üë© **–¢–∏–ø–∞–∂–∏** - —Ä–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–µ–≤—É—à–∫–∞–º–∏
üß¨ **–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è** - –Ω–∞—É—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º! üëá"""
            bot.edit_message_text(
                menu_text,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=create_main_menu_keyboard(),
                parse_mode='Markdown'
            )
        elif call.data.startswith("style_"):
            style = call.data.replace("style_", "")
            response = assistant.process_message(f"–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ —Å—Ç–∏–ª–µ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—è {style}", user_id)
            bot.edit_message_text(
                response,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id
            )
        elif call.data.startswith("type_"):
            type_name = call.data.replace("type_", "")
            response = assistant.process_message(f"–†–∞—Å—Å–∫–∞–∂–∏ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–∏–ø–∞–∂–æ–º –¥–µ–≤—É—à–∫–∏ {type_name}", user_id)
            bot.edit_message_text(
                response,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id
            )
        else:
            # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
            menu_responses = {
                "skrin": "üì∏ **–ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω–∞**\n\n–ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!",
                "svidanie1": "ü•Ç **–ü–µ—Ä–≤–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ**\n\n–†–∞—Å—Å–∫–∞–∂–∏ –æ –¥–µ–≤—É—à–∫–µ - –¥–∞–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é!",
                "svidanie2": "üíë **–í—Ç–æ—Ä–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ**\n\n–ö–∞–∫ –ø—Ä–æ—à–ª–æ –ø–µ—Ä–≤–æ–µ? –°–æ—Å—Ç–∞–≤–ª—é –ø–ª–∞–Ω!",
                "analiz1": "üìä **–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–≤–∏–¥–∞–Ω–∏—è**\n\n–û–ø–∏—à–∏ –∫–∞–∫ –ø—Ä–æ—à–ª–æ!",
                "analiz2": "üìà **–ê–Ω–∞–ª–∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Å–≤–∏–¥–∞–Ω–∏—è**\n\n–†–∞—Å—Å–∫–∞–∂–∏ –¥–µ—Ç–∞–ª–∏!",
                "sos": "üÜò **SOS –°–∏–≥–Ω–∞–ª—ã**\n\n–û–ø–∏—à–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é!",
                "stories": "üìñ **–°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–π**\n\n–û–ø–∏—à–∏ –ø—Å–∏—Ö–æ—Ç–∏–ø –¥–µ–≤—É—à–∫–∏!",
                "signals": "üí° **–°–∏–≥–Ω–∞–ª—ã –∏–Ω—Ç–µ—Ä–µ—Å–∞**\n\n–û–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é!",
                "topics": "üí¨ **–¢–µ–º—ã –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏–π**\n\n–û–ø–∏—à–∏ –¥–µ–≤—É—à–∫—É!",
                "psihotip": "üß¨ **–ü—Å–∏—Ö–æ—Ç–∏–ø**\n\n–û–ø–∏—à–∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–µ–≤—É—à–∫–∏!",
                "nauka": "üî¨ **–ù–∞—É—á–Ω–∞—è –±–∞–∑–∞**\n\n–û –∫–∞–∫–æ–π —Ç–µ–æ—Ä–∏–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?",
                "nastavnik": "üë®‚Äçüè´ **–ù–∞—Å—Ç–∞–≤–Ω–∏–∫**\n\n–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–∏—Ç—É–∞—Ü–∏–∏!"
            }
            
            if menu_type in menu_responses:
                bot.edit_message_text(
                    menu_responses[menu_type],
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode='Markdown'
                )
        
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@bot.message_handler(content_types=['text'])
def handle_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_message = message.text
        user_id = message.from_user.id
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        response = assistant.process_message(user_message, user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        bot.reply_to(message, response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        caption = message.caption or ""
        analysis = "üì∏ **–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ:**\n\n–ü–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞! –û–ø–∏—à–∏ —á—Ç–æ –≤–∏–¥–∏—à—å –Ω–∞ —Ñ–æ—Ç–æ —Ç–µ–∫—Å—Ç–æ–º, –∏ —è –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—é!"
        
        bot.reply_to(message, analysis, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        bot.reply_to(message, "–û–ø–∏—à–∏ —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ —Ç–µ–∫—Å—Ç–æ–º!")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
        if not config.TELEGRAM_TOKEN:
            logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        if not config.OPENAI_API_KEY:
            logger.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é LESLI45BOT 2.0...")
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        logger.info("üéâ LESLI45BOT 2.0 –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ polling
        bot.polling(none_stop=True, interval=0, timeout=30)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        logger.error(traceback.format_exc())

if __name__ == '__main__':
    main()

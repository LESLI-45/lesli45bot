#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
BOOKS LOADER - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–Ω–∏–≥ –õ–µ—Å–ª–∏ –≤ PostgreSQL
–ë–ï–ó TELEGRAM BOT - —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–∏–≥ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è event loop –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
"""

import asyncio
import logging
import os
import sys
import time
import traceback
import psycopg2
from psycopg2.extras import RealDictCursor
import re
from typing import List, Dict

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
try:
    import PyPDF2
    import docx
    import ebooklib
    from ebooklib import epub
except ImportError as e:
    print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤ –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è.")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
try:
    from config import config
except ImportError:
    # Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    class Config:
        DATABASE_URL = os.getenv('DATABASE_URL')
    
    config = Config()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class BooksLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –∫–Ω–∏–≥ –±–µ–∑ Telegram Bot"""
    
    def __init__(self):
        self.setup_database()
        self.create_tables()
    
    def setup_database(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        max_retries = 3
        for attempt in range(max_retries):
            try:
                if config.DATABASE_URL:
                    logger.info("üîó –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ PostgreSQL...")
                    self.db = psycopg2.connect(
                        config.DATABASE_URL,
                        connect_timeout=30,
                        keepalives_idle=30,
                        keepalives_interval=5,
                        keepalives_count=5
                    )
                    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
                    return
                else:
                    raise Exception("DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
            except Exception as e:
                if attempt < max_retries - 1:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}: {e}")
                    time.sleep(2)
                else:
                    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
                    raise

    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        try:
            with self.db.cursor() as cursor:
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS knowledge_base (
                        id SERIAL PRIMARY KEY,
                        book_name VARCHAR(255),
                        chapter VARCHAR(255),
                        content TEXT,
                        keywords TEXT,
                        category VARCHAR(100),
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                cursor.execute("""
                    CREATE INDEX IF NOT EXISTS idx_keywords 
                    ON knowledge_base USING gin(to_tsvector('russian', keywords))
                """)
                
                cursor.execute("""
                    CREATE INDEX IF NOT EXISTS idx_content 
                    ON knowledge_base USING gin(to_tsvector('russian', content))
                """)
                
                self.db.commit()
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")

    def get_books_count(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
        try:
            with self.db.cursor() as cursor:
                cursor.execute("SELECT COUNT(*) FROM knowledge_base")
                result = cursor.fetchone()
                return result[0] if result else 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π: {e}")
            return 0

    def get_books_list(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥"""
        try:
            with self.db.cursor() as cursor:
                cursor.execute("SELECT DISTINCT book_name FROM knowledge_base")
                results = cursor.fetchall()
                return [row[0] for row in results]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥: {e}")
            return []

    def force_load_all_books(self):
        """–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–Ω–∏–≥"""
        logger.info("üöÄ –ù–ê–ß–ò–ù–ê–Æ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–£–Æ –û–ë–†–ê–ë–û–¢–ö–£ –í–°–ï–• –ö–ù–ò–ì")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã
            book_count = self.get_books_count()
            existing_books = self.get_books_list()
            logger.info(f"üìä –í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π —É–∂–µ –µ—Å—Ç—å {book_count} –∑–∞–ø–∏—Å–µ–π")
            logger.info(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–Ω–∏–≥: {len(existing_books)}")
            
            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—É—Ç–∏ –ø–æ–∏—Å–∫–∞
            possible_paths = [
                "/app/books/",
                "./books/", 
                "/books/",
                "/app/",
                "./",
                os.path.join(os.getcwd(), "books"),
                os.path.join(os.path.dirname(__file__), "books")
            ]
            
            books_found = False
            total_processed = 0
            
            for path in possible_paths:
                logger.info(f"üîç –ò—â—É –∫–Ω–∏–≥–∏ –≤: {path}")
                
                try:
                    if os.path.exists(path):
                        files = [f for f in os.listdir(path) if f.lower().endswith(('.pdf', '.txt', '.docx', '.epub'))]
                        
                        if files:
                            logger.info(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(files)} –∫–Ω–∏–≥ –≤ {path}")
                            books_found = True
                            
                            for file in files:
                                file_path = os.path.join(path, file)
                                logger.info(f"üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–Ω–∏–≥—É: {file}")
                                
                                try:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –∫–Ω–∏–≥–∞
                                    if file in existing_books:
                                        logger.info(f"‚è≠Ô∏è –ö–Ω–∏–≥–∞ {file} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                                        continue
                                    
                                    success = self.process_book(file_path, file)
                                    if success:
                                        total_processed += 1
                                        logger.info(f"‚úÖ –ö–Ω–∏–≥–∞ {file} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                                    else:
                                        logger.warning(f"‚ö†Ô∏è –ö–Ω–∏–≥–∞ {file} –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                                        
                                except Exception as e:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file}: {e}")
                                    continue
                            
                            break
                        else:
                            logger.info(f"üìÅ –ü–∞–ø–∫–∞ {path} –ø—É—Å—Ç–∞")
                    else:
                        logger.info(f"‚ùå –ü—É—Ç—å {path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {path}: {e}")
            
            if not books_found:
                logger.warning("‚ö†Ô∏è –ö–ù–ò–ì–ò –ù–ï –ù–ê–ô–î–ï–ù–´! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤")
            else:
                final_count = self.get_books_count()
                final_books = self.get_books_list()
                logger.info(f"üéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
                logger.info(f"üìä –ò—Ç–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {final_count}")
                logger.info(f"üìö –ò—Ç–æ–≥–æ –∫–Ω–∏–≥: {len(final_books)}")
                logger.info(f"üÜï –ù–æ–≤—ã—Ö –∫–Ω–∏–≥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_processed}")
                
                # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥
                for i, book in enumerate(final_books, 1):
                    logger.info(f"  {i}. {book}")
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–∏–≥: {e}")
            logger.error(traceback.format_exc())

    def process_book(self, file_path: str, filename: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –∫–Ω–∏–≥–∞
            with self.db.cursor() as cursor:
                cursor.execute("SELECT COUNT(*) FROM knowledge_base WHERE book_name = %s", (filename,))
                existing = cursor.fetchone()[0]
                
                if existing > 0:
                    logger.info(f"üìö –ö–Ω–∏–≥–∞ {filename} —É–∂–µ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π ({existing} –∑–∞–ø–∏—Å–µ–π)")
                    return False
            
            text_content = ""
            
            if filename.lower().endswith('.pdf'):
                text_content = self.extract_from_pdf(file_path)
            elif filename.lower().endswith('.txt'):
                with open(file_path, 'r', encoding='utf-8') as f:
                    text_content = f.read()
            elif filename.lower().endswith('.docx'):
                text_content = self.extract_from_docx(file_path)
            elif filename.lower().endswith('.epub'):
                text_content = self.extract_from_epub(file_path)
            
            if text_content and len(text_content) > 100:
                success = self.save_book_content(filename, text_content)
                if success:
                    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ {filename}")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {filename}")
                    return False
            else:
                logger.warning(f"‚ö†Ô∏è –ú–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ {filename}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {filename}: {e}")
            return False

    def extract_from_pdf(self, file_path: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF"""
        try:
            with open(file_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                text = ""
                for page in pdf_reader.pages:
                    text += page.extract_text() + "\n"
                return text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PDF {file_path}: {e}")
            return ""

    def extract_from_docx(self, file_path: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX"""
        try:
            doc = docx.Document(file_path)
            text = ""
            for paragraph in doc.paragraphs:
                text += paragraph.text + "\n"
            return text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è DOCX {file_path}: {e}")
            return ""

    def extract_from_epub(self, file_path: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ EPUB"""
        try:
            book = epub.read_epub(file_path)
            text = ""
            for item in book.get_items():
                if item.get_type() == ebooklib.ITEM_DOCUMENT:
                    content = item.get_content().decode('utf-8')
                    # –ü—Ä–æ—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ HTML —Ç–µ–≥–æ–≤
                    clean_text = re.sub(r'<[^>]+>', '', content)
                    text += clean_text + "\n"
            return text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è EPUB {file_path}: {e}")
            return ""

    def save_book_content(self, book_name: str, content: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–Ω–∏–≥–∏ –≤ –±–∞–∑—É —Å retry –ª–æ–≥–∏–∫–æ–π"""
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ ~1000 —Å–∏–º–≤–æ–ª–æ–≤
            chunk_size = 1000
            chunks = [content[i:i+chunk_size] for i in range(0, len(content), chunk_size)]
            
            saved_chunks = 0
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—Ü–∏—è–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            batch_size = 50  # –ü–æ 50 –∑–∞–ø–∏—Å–µ–π –∑–∞ —Ä–∞–∑
            
            for batch_start in range(0, len(chunks), batch_size):
                batch_end = min(batch_start + batch_size, len(chunks))
                batch = chunks[batch_start:batch_end]
                
                # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞—Ç—á —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
                max_retries = 3
                for attempt in range(max_retries):
                    try:
                        with self.db.cursor() as cursor:
                            for i, chunk in enumerate(batch):
                                if len(chunk.strip()) > 50:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —á–∞—Å—Ç–∏
                                    keywords = self.extract_keywords(chunk)
                                    category = self.determine_category(chunk)
                                    
                                    cursor.execute("""
                                        INSERT INTO knowledge_base (book_name, chapter, content, keywords, category)
                                        VALUES (%s, %s, %s, %s, %s)
                                    """, (book_name, f"–ß–∞—Å—Ç—å {batch_start + i + 1}", chunk, keywords, category))
                                    saved_chunks += 1
                            
                            self.db.commit()
                            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –±–∞—Ç—á {batch_start//batch_size + 1} ({len(batch)} —á–∞—Å—Ç–µ–π)")
                            break  # –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
                            
                    except Exception as e:
                        if attempt < max_retries - 1:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞—Ç—á–∞, –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}: {e}")
                            # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
                            try:
                                self.db.close()
                                self.setup_database()
                                time.sleep(1)
                            except:
                                pass
                        else:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞—Ç—á –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                            return False
            
            logger.info(f"üìö –ö–Ω–∏–≥–∞ {book_name} —Ä–∞–∑–±–∏—Ç–∞ –Ω–∞ {saved_chunks} —á–∞—Å—Ç–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–∏–≥–∏ {book_name}: {e}")
            return False

    def extract_keywords(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        keywords = []
        
        # –ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –õ–µ—Å–ª–∏
        lesli_terms = [
            '—Ñ—Ä–µ–π–º', '–¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ', '—Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏–µ', '–ø—É—à-–ø—É–ª', 
            '–∫–æ–∫–µ—Ç—Å—Ç–≤–æ', '—ç—Å–∫–∞–ª–∞—Ü–∏—è', '—Ç–µ—Å—Ç', '–æ—Ç–∫–∞–∑', '—Å–≤–∏–¥–∞–Ω–∏–µ', '–ø–µ—Ä–µ–ø–∏—Å–∫–∞',
            '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–∂–µ–Ω—â–∏–Ω–∞', '–º—É–∂—á–∏–Ω–∞', '–æ—Ç–Ω–æ—à–µ–Ω–∏—è', '—Å–µ–∫—Å', '—Å—Ç—Ä–∞—Å—Ç—å',
            '—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å', '—Ö–∞—Ä–∏–∑–º–∞', '—Å—Ç–∞—Ç—É—Å', '—Ü–µ–Ω–Ω–æ—Å—Ç—å', '–∏–Ω—Ç–µ—Ä–µ—Å', '—ç–º–æ—Ü–∏–∏'
        ]
        
        text_lower = text.lower()
        for term in lesli_terms:
            if term in text_lower:
                keywords.append(term)
        
        return ', '.join(keywords)

    def determine_category(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        text_lower = text.lower()
        
        if any(word in text_lower for word in ['—Å–≤–∏–¥–∞–Ω–∏–µ', '–≤—Å—Ç—Ä–µ—á–∞', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–∞—Ñ–µ']):
            return '—Å–≤–∏–¥–∞–Ω–∏—è'
        elif any(word in text_lower for word in ['–ø–µ—Ä–µ–ø–∏—Å–∫–∞', '—Å–æ–æ–±—â–µ–Ω–∏–µ', '—Ç–µ–∫—Å—Ç', '—á–∞—Ç']):
            return '–ø–µ—Ä–µ–ø–∏—Å–∫–∞'
        elif any(word in text_lower for word in ['–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '—Ç–∏–ø–∞–∂', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä', '–ª–∏—á–Ω–æ—Å—Ç—å']):
            return '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è'
        elif any(word in text_lower for word in ['—Å–µ–∫—Å', '–∏–Ω—Ç–∏–º–Ω–æ—Å—Ç—å', '–ø–æ—Å—Ç–µ–ª—å', '–±–ª–∏–∑–æ—Å—Ç—å']):
            return '–∏–Ω—Ç–∏–º–Ω–æ—Å—Ç—å'
        else:
            return '–æ–±—â–µ–µ'

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥"""
    try:
        logger.info("üöÄ –ó–ê–ü–£–°–ö –ó–ê–ì–†–£–ó–ß–ò–ö–ê –ö–ù–ò–ì –õ–ï–°–õ–ò")
        logger.info("üìñ –¶–µ–ª—å: –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ 9 –∫–Ω–∏–≥ –≤ PostgreSQL –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
        loader = BooksLoader()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_count = loader.get_books_count()
        current_books = loader.get_books_list()
        
        logger.info(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã:")
        logger.info(f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {current_count}")
        logger.info(f"   ‚Ä¢ –ö–Ω–∏–≥: {len(current_books)}")
        
        if current_books:
            logger.info(f"üìö –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
            for i, book in enumerate(current_books, 1):
                logger.info(f"   {i}. {book}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏
        loader.force_load_all_books()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        final_count = loader.get_books_count()
        final_books = loader.get_books_list()
        
        logger.info("üéâ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        logger.info(f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {final_count}")
        logger.info(f"   ‚Ä¢ –ö–Ω–∏–≥: {len(final_books)}")
        logger.info(f"   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {final_count - current_count}")
        
        if len(final_books) >= 9:
            logger.info("‚úÖ –í–°–ï 9 –ö–ù–ò–ì –õ–ï–°–õ–ò –ó–ê–ì–†–£–ñ–ï–ù–´!")
        else:
            logger.warning(f"‚ö†Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(final_books)} –∏–∑ 9 –∫–Ω–∏–≥")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(traceback.format_exc())
    
    logger.info("üèÅ –ó–ê–ì–†–£–ó–ß–ò–ö –ö–ù–ò–ì –ó–ê–í–ï–†–®–ò–õ –†–ê–ë–û–¢–£")

if __name__ == '__main__':
    main()

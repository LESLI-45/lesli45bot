#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
LESLI45BOT - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π Telegram-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—é
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ GPT-4o —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –∏–∑ –∫–Ω–∏–≥ –ê–ª–µ–∫—Å–∞ –õ–µ—Å–ª–∏
WEBHOOK VERSION –¥–ª—è Render
"""

import asyncio
import logging
from datetime import datetime, timedelta
import json
import os
import sys
import traceback
from typing import Optional, List, Dict, Any

# Telegram Bot API
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# OpenAI API
from openai import AsyncOpenAI

# Database
import asyncpg
import sqlite3

# File processing
import PyPDF2
import docx
import ebooklib
from ebooklib import epub
from io import BytesIO
import re

# Image processing
from PIL import Image
import base64

# Web server –¥–ª—è webhook
from flask import Flask, request, jsonify
import threading

# Configuration
try:
    from config import config
except ImportError:
    class Config:
        def __init__(self):
            self.TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
            self.OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
            self.DATABASE_URL = os.getenv('DATABASE_URL')
            self.MODEL = "gpt-4o"
            self.MAX_TOKENS = 2000
            self.TEMPERATURE = 0.7
            
        def __getattr__(self, name):
            return os.getenv(name)
    
    config = Config()

# Logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Flask app –¥–ª—è webhook
app = Flask(__name__)

class KnowledgeBase:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –∏–∑ –∫–Ω–∏–≥"""
    
    def __init__(self, db_connection=None):
        self.db = db_connection
        self.create_tables()
        
    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        try:
            if isinstance(self.db, sqlite3.Connection):
                cursor = self.db.cursor()
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS knowledge_base (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        book_name TEXT NOT NULL,
                        content TEXT NOT NULL,
                        keywords TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                cursor.execute('''
                    CREATE INDEX IF NOT EXISTS idx_keywords ON knowledge_base(keywords)
                ''')
                self.db.commit()
            else:
                # PostgreSQL
                asyncio.create_task(self._create_postgres_tables())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
    
    async def _create_postgres_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL"""
        try:
            await self.db.execute('''
                CREATE TABLE IF NOT EXISTS knowledge_base (
                    id SERIAL PRIMARY KEY,
                    book_name TEXT NOT NULL,
                    content TEXT NOT NULL,
                    keywords TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            await self.db.execute('''
                CREATE INDEX IF NOT EXISTS idx_keywords ON knowledge_base(keywords)
            ''')
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PostgreSQL —Ç–∞–±–ª–∏—Ü: {e}")
    
    async def search_knowledge(self, query: str, limit: int = 5) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
        try:
            keywords = query.lower().split()
            
            if isinstance(self.db, sqlite3.Connection):
                cursor = self.db.cursor()
                placeholders = ' OR '.join(['content LIKE ?' for _ in keywords])
                search_terms = [f'%{keyword}%' for keyword in keywords]
                
                cursor.execute(f'''
                    SELECT book_name, content FROM knowledge_base 
                    WHERE {placeholders}
                    ORDER BY created_at DESC
                    LIMIT ?
                ''', search_terms + [limit])
                
                results = cursor.fetchall()
                return [{'book': row[0], 'content': row[1]} for row in results]
            else:
                # PostgreSQL
                placeholders = ' OR '.join(['content ILIKE $' + str(i+1) for i in range(len(keywords))])
                search_terms = [f'%{keyword}%' for keyword in keywords]
                
                query_sql = f'''
                    SELECT book_name, content FROM knowledge_base 
                    WHERE {placeholders}
                    ORDER BY created_at DESC
                    LIMIT ${len(keywords)+1}
                '''
                
                results = await self.db.fetch(query_sql, *search_terms, limit)
                return [{'book': row['book_name'], 'content': row['content']} for row in results]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {e}")
            return []
    
    async def force_load_all_books(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–Ω–∏–≥"""
        logger.info("üöÄ –ù–ê–ß–ò–ù–ê–Æ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–£–Æ –û–ë–†–ê–ë–û–¢–ö–£ –ö–ù–ò–ì")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–Ω–∏–≥–∏
            if isinstance(self.db, sqlite3.Connection):
                cursor = self.db.cursor()
                cursor.execute("SELECT COUNT(*) FROM knowledge_base")
                count = cursor.fetchone()[0]
            else:
                result = await self.db.fetchrow("SELECT COUNT(*) FROM knowledge_base")
                count = result[0] if result else 0
            
            logger.info(f"üìä –í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π —É–∂–µ –µ—Å—Ç—å {count} –∑–∞–ø–∏—Å–µ–π")
            
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –±–æ–ª—å—à–µ 100, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∫–Ω–∏–≥–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            if count > 100:
                logger.info("‚úÖ –ö–Ω–∏–≥–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Ä–∞–Ω–µ–µ")
                return
            
            # –ò—â–µ–º –∫–Ω–∏–≥–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö
            possible_paths = [
                "/opt/render/project/src/books/",
                "./books/",
                "/books/",
                "/opt/render/project/src/",
                "./",
                os.path.join(os.getcwd(), "books")
            ]
            
            books_processed = 0
            
            for path in possible_paths:
                if os.path.exists(path):
                    logger.info(f"üîç –ò—â—É –∫–Ω–∏–≥–∏ –≤: {path}")
                    files = [f for f in os.listdir(path) if f.lower().endswith(('.pdf', '.docx', '.txt', '.epub'))]
                    
                    if files:
                        logger.info(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(files)} –∫–Ω–∏–≥ –≤ {path}")
                        
                        for file in files:
                            try:
                                file_path = os.path.join(path, file)
                                content = self.extract_text_from_file(file_path)
                                
                                if content:
                                    await self.save_book_content(file, content)
                                    books_processed += 1
                                    logger.info(f"‚úÖ –ö–Ω–∏–≥–∞ {file} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                                    
                            except Exception as e:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file}: {e}")
                        
                        if books_processed > 0:
                            break
            
            if books_processed == 0:
                logger.warning("‚ö†Ô∏è –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ")
            else:
                logger.info(f"üéâ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {books_processed} –∫–Ω–∏–≥!")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥: {e}")
    
    def extract_text_from_file(self, file_path: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if file_path.lower().endswith('.pdf'):
                return self.extract_from_pdf(file_path)
            elif file_path.lower().endswith('.docx'):
                return self.extract_from_docx(file_path)
            elif file_path.lower().endswith('.txt'):
                return self.extract_from_txt(file_path)
            elif file_path.lower().endswith('.epub'):
                return self.extract_from_epub(file_path)
            else:
                return ""
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ {file_path}: {e}")
            return ""
    
    def extract_from_pdf(self, file_path: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF"""
        try:
            text = ""
            with open(file_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                for page in pdf_reader.pages:
                    text += page.extract_text()
            return text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ PDF {file_path}: {e}")
            return ""
    
    def extract_from_docx(self, file_path: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX"""
        try:
            doc = docx.Document(file_path)
            text = "\n".join([paragraph.text for paragraph in doc.paragraphs])
            return text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ DOCX {file_path}: {e}")
            return ""
    
    def extract_from_txt(self, file_path: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ TXT"""
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                return file.read()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ TXT {file_path}: {e}")
            return ""
    
    def extract_from_epub(self, file_path: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ EPUB"""
        try:
            book = epub.read_epub(file_path)
            text = ""
            for item in book.get_items():
                if item.get_type() == ebooklib.ITEM_DOCUMENT:
                    content = item.get_content().decode('utf-8')
                    # –ü—Ä–æ—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ HTML —Ç–µ–≥–æ–≤
                    clean_text = re.sub(r'<[^>]+>', '', content)
                    text += clean_text + "\n"
            return text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ EPUB {file_path}: {e}")
            return ""
    
    async def save_book_content(self, book_name: str, content: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–Ω–∏–≥–∏ –≤ –±–∞–∑—É"""
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ ~1000 —Å–∏–º–≤–æ–ª–æ–≤
            chunk_size = 1000
            chunks = [content[i:i+chunk_size] for i in range(0, len(content), chunk_size)]
            
            for chunk in chunks:
                if len(chunk.strip()) > 50:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —á–∞—Å—Ç–∏
                    keywords = self.extract_keywords(chunk)
                    
                    if isinstance(self.db, sqlite3.Connection):
                        cursor = self.db.cursor()
                        cursor.execute('''
                            INSERT INTO knowledge_base (book_name, content, keywords)
                            VALUES (?, ?, ?)
                        ''', (book_name, chunk, keywords))
                        self.db.commit()
                    else:
                        await self.db.execute('''
                            INSERT INTO knowledge_base (book_name, content, keywords)
                            VALUES ($1, $2, $3)
                        ''', book_name, chunk, keywords)
            
            logger.info(f"üìö –ö–Ω–∏–≥–∞ {book_name} —Ä–∞–∑–±–∏—Ç–∞ –Ω–∞ {len(chunks)} —á–∞—Å—Ç–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–∏–≥–∏ {book_name}: {e}")
    
    def extract_keywords(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            words = re.findall(r'\b\w+\b', text.lower())
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞ –¥–ª–∏–Ω–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤
            keywords = [word for word in words if len(word) > 3]
            return ' '.join(keywords[:20])  # –ü–µ—Ä–≤—ã–µ 20 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {e}")
            return ""

class ConversationMemory:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
    
    def __init__(self, db_connection=None):
        self.db = db_connection
        self.create_tables()
    
    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–∞–º—è—Ç–∏"""
        try:
            if isinstance(self.db, sqlite3.Connection):
                cursor = self.db.cursor()
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS conversations (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER NOT NULL,
                        role TEXT NOT NULL,
                        message TEXT NOT NULL,
                        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                self.db.commit()
            else:
                # PostgreSQL
                asyncio.create_task(self._create_postgres_memory_tables())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ø–∞–º—è—Ç–∏: {e}")
    
    async def _create_postgres_memory_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–∞–º—è—Ç–∏ –≤ PostgreSQL"""
        try:
            await self.db.execute('''
                CREATE TABLE IF NOT EXISTS conversations (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    role TEXT NOT NULL,
                    message TEXT NOT NULL,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø–∞–º—è—Ç–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ø–∞–º—è—Ç–∏: {e}")
    
    async def save_message(self, user_id: int, role: str, message: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å"""
        try:
            if isinstance(self.db, sqlite3.Connection):
                cursor = self.db.cursor()
                cursor.execute('''
                    INSERT INTO conversations (user_id, role, message)
                    VALUES (?, ?, ?)
                ''', (user_id, role, message))
                self.db.commit()
            else:
                await self.db.execute('''
                    INSERT INTO conversations (user_id, role, message)
                    VALUES ($1, $2, $3)
                ''', user_id, role, message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def get_conversation_history(self, user_id: int, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        try:
            if isinstance(self.db, sqlite3.Connection):
                cursor = self.db.cursor()
                cursor.execute('''
                    SELECT role, message FROM conversations 
                    WHERE user_id = ? 
                    ORDER BY timestamp DESC 
                    LIMIT ?
                ''', (user_id, limit))
                
                results = cursor.fetchall()
                return [{'role': row[0], 'content': row[1]} for row in reversed(results)]
            else:
                results = await self.db.fetch('''
                    SELECT role, message FROM conversations 
                    WHERE user_id = $1 
                    ORDER BY timestamp DESC 
                    LIMIT $2
                ''', user_id, limit)
                
                return [{'role': row['role'], 'content': row['message']} for row in reversed(results)]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return []

class ImageAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        self.openai_client = AsyncOpenAI(api_key=config.OPENAI_API_KEY)
    
    async def analyze_image(self, image_data: bytes, context: str = "") -> str:
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é GPT-4 Vision"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
            image = Image.open(BytesIO(image_data))
            
            # –£–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
            if image.size[0] > 1024 or image.size[1] > 1024:
                image.thumbnail((1024, 1024), Image.Resampling.LANCZOS)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            buffered = BytesIO()
            image.save(buffered, format="JPEG")
            image_base64 = base64.b64encode(buffered.getvalue()).decode()
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ
            system_prompt = f"""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—è –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏.
            
            –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ –¥–µ–≤—É—à–∫–∏ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è:
            1. –ü—Å–∏—Ö–æ—Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏
            2. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 
            3. –°—Ç–∏–ª—å –∏ —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è
            4. –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—â–µ–Ω–∏—è
            
            –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}
            
            –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—é."""
            
            response = await self.openai_client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{image_base64}"
                                }
                            },
                            {
                                "type": "text",
                                "text": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Ñ–æ—Ç–æ –∏ –¥–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—é"
                            }
                        ]
                    }
                ],
                max_tokens=1000
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

class PsychoAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    def __init__(self):
        self.openai_client = AsyncOpenAI(api_key=config.OPENAI_API_KEY)
    
    async def analyze_psychology(self, text: str, context: str = "") -> str:
        """–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞/—Å–∏—Ç—É–∞—Ü–∏–∏"""
        try:
            system_prompt = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø—Å–∏—Ö–æ–ª–æ–≥ —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –≤ –æ–±–ª–∞—Å—Ç–∏:
            - –¢–µ–æ—Ä–∏–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏
            - –ü—Å–∏—Ö–æ—Ç–∏–ø–æ–ª–æ–≥–∏–∏
            - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏
            - –°–æ—Ü–∏–∞–ª—å–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏
            - –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            
            –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏—Ç—É–∞—Ü–∏–∏ —Å –Ω–∞—É—á–Ω–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –∏ –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
            
            response = await self.openai_client.chat.completions.create(
                model=config.MODEL,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π: {text}"}
                ],
                max_tokens=config.MAX_TOKENS,
                temperature=config.TEMPERATURE
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

class LesliAssistant:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –±–æ—Ç–∞-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.openai_client = AsyncOpenAI(api_key=config.OPENAI_API_KEY)
        self.db = None
        self.knowledge = None
        self.memory = None
        self.image_analyzer = ImageAnalyzer()
        self.psycho_analyzer = PsychoAnalyzer()
    
    async def initialize_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if config.DATABASE_URL and config.DATABASE_URL.startswith('postgresql'):
                logger.info("üîó –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ PostgreSQL...")
                self.db = await asyncpg.connect(config.DATABASE_URL)
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.info("üîó –ò—Å–ø–æ–ª—å–∑—É—é SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                self.db = sqlite3.connect('lesli_bot.db')
                
            self.knowledge = KnowledgeBase(self.db)
            self.memory = ConversationMemory(self.db)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–∏–≥–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            await self.initialize_knowledge_base()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            # Fallback –∫ SQLite
            self.db = sqlite3.connect('lesli_bot.db')
            self.knowledge = KnowledgeBase(self.db)
            self.memory = ConversationMemory(self.db)
    
    async def initialize_knowledge_base(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        logger.info("üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
        await self.knowledge.force_load_all_books()
    
    async def get_gpt_response(self, messages: List[Dict]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT"""
        try:
            response = await self.openai_client.chat.completions.create(
                model=config.MODEL,
                messages=messages,
                max_tokens=config.MAX_TOKENS,
                temperature=config.TEMPERATURE
            )
            return response.choices[0].message.content
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    async def process_message(self, user_message: str, user_id: int) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
            knowledge_results = await self.knowledge.search_knowledge(user_message, limit=3)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            conversation_history = await self.memory.get_conversation_history(user_id, limit=5)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            knowledge_context = ""
            if knowledge_results:
                knowledge_context = "\n".join([
                    f"–ò–∑ –∫–Ω–∏–≥–∏ '{result['book']}': {result['content'][:300]}..."
                    for result in knowledge_results
                ])
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            system_prompt = f"""–¢—ã LESLI45BOT - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–æ–¥–æ–≤ –ê–ª–µ–∫—Å–∞ –õ–µ—Å–ª–∏.

–¢–í–û–ò –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò:
üéØ –ê–Ω–∞–ª–∏–∑ –∫–µ–π—Å–æ–≤ –∏ —Å–∏—Ç—É–∞—Ü–∏–π
üí¨ –ü–æ–º–æ—â—å —Å –ø–µ—Ä–µ–ø–∏—Å–∫–æ–π
ü•Ç –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏–π
üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
üÜò SOS —Ç–µ—Ö–Ω–∏–∫–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è
üé≠ –°—Ç–∏–ª–∏ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—è (–ü–æ–¥–æ–Ω–æ–∫, –†–æ–º–∞–Ω—Ç–∏–∫, –ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä, –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π, –ú–∞—Å—Ç–µ—Ä)
üë© –†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–∂–∞–º–∏ –¥–µ–≤—É—à–µ–∫
üí° –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–Ω—Ç–µ—Ä–µ—Å–∞
üìñ –°–æ–∑–¥–∞–Ω–∏–µ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π
üí¨ –¢–µ–º—ã –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Å–≤–∏–¥–∞–Ω–∏–π

–ë–ê–ó–ê –ó–ù–ê–ù–ò–ô –õ–ï–°–õ–ò:
{knowledge_context}

–ü–†–ò–ù–¶–ò–ü–´ –†–ê–ë–û–¢–´:
- –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–æ–¥—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑ –∫–Ω–∏–≥ –õ–µ—Å–ª–∏
- –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
- –£—á–∏—Ç—ã–≤–∞–π –ø—Å–∏—Ö–æ—Ç–∏–ø –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–∏—Ç—É–∞—Ü–∏–∏
- –ë—É–¥—å –ø—Ä—è–º—ã–º –∏ —á–µ—Å—Ç–Ω—ã–º
- –ü–æ–º–Ω–∏ –æ —Å–æ–≥–ª–∞—Å–∏–∏ –∏ —ç—Ç–∏–∫–µ

–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ - –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏."""

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è GPT
            messages = [{"role": "system", "content": system_prompt}]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            messages.extend(conversation_history)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            messages.append({"role": "user", "content": user_message})
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            response = await self.get_gpt_response(messages)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
            await self.memory.save_message(user_id, "user", user_message)
            await self.memory.save_message(user_id, "assistant", response)
            
            return response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
assistant = LesliAssistant()

def create_main_menu_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é"""
    keyboard = [
        # –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
        [InlineKeyboardButton("üß† –ö–µ–π—Å", callback_data="menu_keis"),
         InlineKeyboardButton("üí¨ –ü–µ—Ä–µ–ø–∏—Å–∫–∞", callback_data="menu_perepiska")],
        [InlineKeyboardButton("üí° –û—Ç–≤–µ—Ç", callback_data="menu_otvet"),
         InlineKeyboardButton("üì∏ –°–∫—Ä–∏–Ω", callback_data="menu_skrin")],
        
        # –°–≤–∏–¥–∞–Ω–∏—è
        [InlineKeyboardButton("ü•Ç –°–≤–∏–¥–∞–Ω–∏–µ 1", callback_data="menu_svidanie1"),
         InlineKeyboardButton("üíë –°–≤–∏–¥–∞–Ω–∏–µ 2", callback_data="menu_svidanie2")],
        [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ 1", callback_data="menu_analiz1"),
         InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏–∑ 2", callback_data="menu_analiz2")],
        
        # –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        [InlineKeyboardButton("üÜò SOS –°–∏–≥–Ω–∞–ª—ã", callback_data="menu_sos"),
         InlineKeyboardButton("üé≠ –°—Ç–∏–ª–∏ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—è", callback_data="menu_styles")],
        [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏–∏", callback_data="menu_stories"),
         InlineKeyboardButton("üí° –°–∏–≥–Ω–∞–ª—ã –∏–Ω—Ç–µ—Ä–µ—Å–∞", callback_data="menu_signals")],
        [InlineKeyboardButton("üë© –¢–∏–ø–∞–∂–∏ –¥–µ–≤—É—à–µ–∫", callback_data="menu_types"),
         InlineKeyboardButton("üí¨ –¢–µ–º—ã –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏–π", callback_data="menu_topics")],
        
        # –ó–Ω–∞–Ω–∏—è
        [InlineKeyboardButton("üß¨ –ü—Å–∏—Ö–æ—Ç–∏–ø", callback_data="menu_psihotip"),
         InlineKeyboardButton("üìö –ó–Ω–∞–Ω–∏–µ", callback_data="menu_znanie")],
        [InlineKeyboardButton("üî¨ –ù–∞—É–∫–∞", callback_data="menu_nauka"),
         InlineKeyboardButton("üë®‚Äçüè´ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫", callback_data="menu_nastavnik")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"""
    menu_text = """
üî• **LESLI45BOT 2.0 - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**

–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:

üß† **–ê–Ω–∞–ª–∏–∑** - —Ä–∞–∑–±–æ—Ä —Å–∏—Ç—É–∞—Ü–∏–π –∏ –∫–µ–π—Å–æ–≤
üí¨ **–û–±—â–µ–Ω–∏–µ** - –ø–æ–º–æ—â—å —Å –ø–µ—Ä–µ–ø–∏—Å–∫–æ–π –∏ –æ—Ç–≤–µ—Ç–∞–º–∏
ü•Ç **–°–≤–∏–¥–∞–Ω–∏—è** - —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á
üÜò **SOS** - —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –≤–ª–∏—è–Ω–∏—è
üé≠ **–°—Ç–∏–ª–∏** - –º–µ—Ç–æ–¥—ã —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—è
üë© **–¢–∏–ø–∞–∂–∏** - —Ä–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–µ–≤—É—à–∫–∞–º–∏
üß¨ **–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è** - –Ω–∞—É—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º! üëá
"""
    
    try:
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=menu_text,
                reply_markup=create_main_menu_keyboard(),
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                text=menu_text,
                reply_markup=create_main_menu_keyboard(),
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é: {e}")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    menu_type = query.data.replace("menu_", "")
    user_id = query.from_user.id
    
    if menu_type == "keis":
        await query.edit_message_text(
            "üß† **–ê–Ω–∞–ª–∏–∑ –∫–µ–π—Å–∞**\n\n"
            "–û–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é —Å –¥–µ–≤—É—à–∫–æ–π:\n"
            "‚Ä¢ –ì–¥–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å?\n"
            "‚Ä¢ –ö–∞–∫ –æ–±—â–∞–ª–∏—Å—å?\n"
            "‚Ä¢ –ß—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫?\n\n"
            "–î–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é!"
        )
    elif menu_type == "perepiska":
        await query.edit_message_text(
            "üí¨ **–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏**\n\n"
            "–ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏–ª–∏ –æ–ø–∏—à–∏ –¥–∏–∞–ª–æ–≥.\n\n"
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é:\n"
            "‚Ä¢ –ï—ë –∏–Ω—Ç–µ—Ä–µ—Å –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\n"
            "‚Ä¢ –¢–≤–æ–∏ –æ—à–∏–±–∫–∏\n"
            "‚Ä¢ –ö–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ\n\n"
            "–ú–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –ø–µ—Ä–µ–ø–∏—Å–∫–∏!"
        )
    elif menu_type == "otvet":
        await query.edit_message_text(
            "üí° **–ü–æ–º–æ—â—å —Å –æ—Ç–≤–µ—Ç–æ–º**\n\n"
            "–û–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é:\n"
            "‚Ä¢ –ß—Ç–æ –æ–Ω–∞ –Ω–∞–ø–∏—Å–∞–ª–∞?\n"
            "‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –¢–≤–æ—è —Ü–µ–ª—å\n\n"
            "–î–∞–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º!"
        )
    elif menu_type == "skrin":
        await query.edit_message_text(
            "üì∏ **–ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω–∞**\n\n"
            "–ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω:\n"
            "‚Ä¢ –ü–µ—Ä–µ–ø–∏—Å–∫–∏\n"
            "‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—è –¥–µ–≤—É—à–∫–∏\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏–∏/–ø–æ—Å—Ç–∞\n\n"
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!"
        )
    elif menu_type == "svidanie1":
        await query.edit_message_text(
            "ü•Ç **–ü–µ—Ä–≤–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ**\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ –¥–µ–≤—É—à–∫–µ:\n"
            "‚Ä¢ –ì–¥–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å?\n"
            "‚Ä¢ –ï—ë –ø—Å–∏—Ö–æ—Ç–∏–ø\n"
            "‚Ä¢ –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å?\n\n"
            "–î–∞–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
        )
    elif menu_type == "svidanie2":
        await query.edit_message_text(
            "üíë **–í—Ç–æ—Ä–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ**\n\n"
            "–ö–∞–∫ –ø—Ä–æ—à–ª–æ –ø–µ—Ä–≤–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ?\n"
            "‚Ä¢ –ß—Ç–æ –¥–µ–ª–∞–ª–∏?\n"
            "‚Ä¢ –ï—ë —Ä–µ–∞–∫—Ü–∏—è\n"
            "‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –±–ª–∏–∑–æ—Å—Ç–∏\n\n"
            "–°–æ—Å—Ç–∞–≤–ª—é –ø–ª–∞–Ω –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
        )
    elif menu_type == "analiz1":
        await query.edit_message_text(
            "üìä **–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–≤–∏–¥–∞–Ω–∏—è**\n\n"
            "–û–ø–∏—à–∏ –∫–∞–∫ –ø—Ä–æ—à–ª–æ:\n"
            "‚Ä¢ –ú–µ—Å—Ç–æ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
            "‚Ä¢ –ï—ë –ø–æ–≤–µ–¥–µ–Ω–∏–µ\n"
            "‚Ä¢ –¢–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è\n"
            "‚Ä¢ –ò—Ç–æ–≥ –≤—Å—Ç—Ä–µ—á–∏\n\n"
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!"
        )
    elif menu_type == "analiz2":
        await query.edit_message_text(
            "üìà **–ê–Ω–∞–ª–∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Å–≤–∏–¥–∞–Ω–∏—è**\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏ –¥–µ—Ç–∞–ª–∏:\n"
            "‚Ä¢ –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å?\n"
            "‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–∏–º–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –ï—ë —Å–∏–≥–Ω–∞–ª—ã\n"
            "‚Ä¢ –ü–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ\n\n"
            "–î–∞–º –æ—Ü–µ–Ω–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!"
        )
    elif menu_type == "sos":
        await query.edit_message_text(
            "üÜò **SOS –°–∏–≥–Ω–∞–ª—ã**\n\n"
            "–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –≤–ª–∏—è–Ω–∏—è:\n"
            "‚Ä¢ –ß–µ—Ä–µ–∑ –æ–±—Ä–∞–∑—ã –∏ –∏—Å—Ç–æ—Ä–∏–∏\n"
            "‚Ä¢ –ù–µ–≤–µ—Ä–±–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n"
            "‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —è–∫–æ—Ä—è\n\n"
            "–û–ø–∏—à–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é!"
        )
    elif menu_type == "styles":
        keyboard = [
            [InlineKeyboardButton("üòà –ü–æ–¥–æ–Ω–æ–∫", callback_data="style_podonok")],
            [InlineKeyboardButton("üåπ –†–æ–º–∞–Ω—Ç–∏–∫", callback_data="style_romantic")],
            [InlineKeyboardButton("üî• –ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä", callback_data="style_provokator")],
            [InlineKeyboardButton("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π", callback_data="style_structural")],
            [InlineKeyboardButton("üëë –ú–∞—Å—Ç–µ—Ä", callback_data="style_master")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]
        ]
        await query.edit_message_text(
            "üé≠ **–°—Ç–∏–ª–∏ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—è**\n\n"
            "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n\n"
            "üòà **–ü–æ–¥–æ–Ω–æ–∫** - –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–∑–æ–≤\n"
            "üåπ **–†–æ–º–∞–Ω—Ç–∏–∫** - —ç–º–æ—Ü–∏–∏ –∏ —á—É–≤—Å—Ç–≤–∞\n"
            "üî• **–ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä** - –∏–Ω—Ç—Ä–∏–≥–∞ –∏ –∑–∞–≥–∞–¥–æ—á–Ω–æ—Å—Ç—å\n"
            "üìã **–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π** - –ª–æ–≥–∏–∫–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "üëë **–ú–∞—Å—Ç–µ—Ä** - –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –≤—Å–µ—Ö —Å—Ç–∏–ª–µ–π",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif menu_type == "stories":
        await query.edit_message_text(
            "üìñ **–°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–π**\n\n"
            "–û–ø–∏—à–∏:\n"
            "‚Ä¢ –ü—Å–∏—Ö–æ—Ç–∏–ø –¥–µ–≤—É—à–∫–∏\n"
            "‚Ä¢ –°–∏—Ç—É–∞—Ü–∏—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏\n"
            "‚Ä¢ –¶–µ–ª—å (–≤–ø–µ—á–∞—Ç–ª–∏—Ç—å/–∑–∞–∏–Ω—Ç—Ä–∏–≥–æ–≤–∞—Ç—å/—Å–æ–±–ª–∞–∑–Ω–∏—Ç—å)\n\n"
            "–°–æ–∑–¥–∞–º —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–¥ –µ—ë —Ç–∏–ø!"
        )
    elif menu_type == "signals":
        keyboard = [
            [InlineKeyboardButton("üí¨ –í –ø–µ—Ä–µ–ø–∏—Å–∫–µ", callback_data="signals_chat")],
            [InlineKeyboardButton("ü•Ç –ù–∞ —Å–≤–∏–¥–∞–Ω–∏–∏", callback_data="signals_date")],
            [InlineKeyboardButton("üì± –í —Å–æ—Ü—Å–µ—Ç—è—Ö", callback_data="signals_social")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]
        ]
        await query.edit_message_text(
            "üí° **–°–∏–≥–Ω–∞–ª—ã –∏–Ω—Ç–µ—Ä–µ—Å–∞**\n\n"
            "–ì–¥–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã?\n\n"
            "üí¨ **–í –ø–µ—Ä–µ–ø–∏—Å–∫–µ** - —Ç–µ–∫—Å—Ç, —ç–º–æ–¥–∑–∏, –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞\n"
            "ü•Ç **–ù–∞ —Å–≤–∏–¥–∞–Ω–∏–∏** - –∂–µ—Å—Ç—ã, –≤–∑–≥–ª—è–¥—ã, –ø–æ–≤–µ–¥–µ–Ω–∏–µ\n"
            "üì± **–í —Å–æ—Ü—Å–µ—Ç—è—Ö** - –ª–∞–π–∫–∏, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif menu_type == "types":
        keyboard = [
            [InlineKeyboardButton("üë∏ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∞—è", callback_data="type_control")],
            [InlineKeyboardButton("üî• –ß—É–≤—Å—Ç–≤–µ–Ω–Ω–∞—è", callback_data="type_sensual")],
            [InlineKeyboardButton("üé≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è", callback_data="type_emotional")],
            [InlineKeyboardButton("üåô –ó–∞–º–∫–Ω—É—Ç–∞—è", callback_data="type_closed")],
            [InlineKeyboardButton("üå∏ –ú–æ–ª–æ–¥—ã–µ", callback_data="type_young")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]
        ]
        await query.edit_message_text(
            "üë© **–¢–∏–ø–∞–∂–∏ –¥–µ–≤—É—à–µ–∫**\n\n"
            "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n\n"
            "üë∏ **–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∞—è** - –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–∞—è, –≤–ª–∞—Å—Ç–Ω–∞—è\n"
            "üî• **–ß—É–≤—Å—Ç–≤–µ–Ω–Ω–∞—è** - —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è, —Å—Ç—Ä–∞—Å—Ç–Ω–∞—è\n"
            "üé≠ **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è** - –∏–º–ø—É–ª—å—Å–∏–≤–Ω–∞—è, —è—Ä–∫–∞—è\n"
            "üåô **–ó–∞–º–∫–Ω—É—Ç–∞—è** - —Å–∫—Ä—ã—Ç–Ω–∞—è, –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è\n"
            "üå∏ **–ú–æ–ª–æ–¥—ã–µ** - –Ω–µ–æ–ø—ã—Ç–Ω—ã–µ, –æ—Ç–∫—Ä—ã—Ç—ã–µ",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif menu_type == "topics":
        await query.edit_message_text(
            "üí¨ **–¢–µ–º—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–≤–∏–¥–∞–Ω–∏—è**\n\n"
            "–û–ø–∏—à–∏ –¥–µ–≤—É—à–∫—É:\n"
            "‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã\n"
            "‚Ä¢ –ü—Å–∏—Ö–æ—Ç–∏–ø\n"
            "‚Ä¢ –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏\n\n"
            "–î–∞–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞!"
        )
    elif menu_type == "psihotip":
        await query.edit_message_text(
            "üß¨ **–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Å–∏—Ö–æ—Ç–∏–ø–∞**\n\n"
            "–û–ø–∏—à–∏ –¥–µ–≤—É—à–∫—É:\n"
            "‚Ä¢ –ü–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –æ–±—â–µ–Ω–∏–∏\n"
            "‚Ä¢ –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏–∏\n"
            "‚Ä¢ –°—Ç–∏–ª—å –∂–∏–∑–Ω–∏\n"
            "‚Ä¢ –ß—Ç–æ –µ—ë –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç\n\n"
            "–û–ø—Ä–µ–¥–µ–ª—é –ø—Å–∏—Ö–æ—Ç–∏–ø –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!"
        )
    elif menu_type == "znanie":
        await query.edit_message_text(
            "üìö **–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π**\n\n"
            "–û —á–µ–º —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∏–∑ —Ç–µ–æ—Ä–∏–∏?\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –¥–æ–≤–µ—Ä–∏–µ –ø–µ—Ä–µ–¥ —Å–µ–∫—Å–æ–º'"
        )
    elif menu_type == "nauka":
        await query.edit_message_text(
            "üî¨ **–ù–∞—É—á–Ω–∞—è –±–∞–∑–∞**\n\n"
            "–û –∫–∞–∫–æ–π –Ω–∞—É—á–Ω–æ–π —Ç–µ–æ—Ä–∏–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ —Ç–µ–æ—Ä–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è –≤–ª–∏—è–Ω–∏—è\n"
            "‚Ä¢ –Ω–µ–π—Ä–æ–±–∏–æ–ª–æ–≥–∏—è –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è"
        )
    elif menu_type == "nastavnik":
        await query.edit_message_text(
            "üë®‚Äçüè´ **–†–µ–∂–∏–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞**\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–π —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏:\n"
            "‚Ä¢ –¶–µ–ª–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–µ–≤—É—à–∫–∞–º–∏\n"
            "‚Ä¢ –ß—Ç–æ —Ö–æ—á–µ—à—å —É–ª—É—á—à–∏—Ç—å\n\n"
            "–î–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è!"
        )
    elif menu_type == "main":
        await show_main_menu(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–ª–µ–π —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—è
    elif query.data.startswith("style_"):
        style = query.data.replace("style_", "")
        response = await assistant.process_message(f"–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ —Å—Ç–∏–ª–µ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—è {style}", user_id)
        await query.edit_message_text(response)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞–∂–µ–π
    elif query.data.startswith("type_"):
        type_name = query.data.replace("type_", "")
        response = await assistant.process_message(f"–†–∞—Å—Å–∫–∞–∂–∏ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–∏–ø–∞–∂–æ–º –¥–µ–≤—É—à–∫–∏ {type_name}", user_id)
        await query.edit_message_text(response)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    elif query.data.startswith("signals_"):
        signal_type = query.data.replace("signals_", "")
        response = await assistant.process_message(f"–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–∏–≥–Ω–∞–ª–∞—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞ {signal_type}", user_id)
        await query.edit_message_text(response)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_message = update.message.text
        user_id = update.effective_user.id
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        response = await assistant.process_message(user_message, user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await update.message.reply_text(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        file = await context.bot.get_file(photo.file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_data = await file.download_as_bytearray()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        caption = update.message.caption or ""
        analysis = await assistant.image_analyzer.analyze_image(bytes(image_data), caption)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        await assistant.memory.save_message(user_id, "user", f"[–§–æ—Ç–æ] {caption}")
        await assistant.memory.save_message(user_id, "assistant", analysis)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update.message.reply_text(f"üì∏ **–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ:**\n\n{analysis}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("–ù–µ –º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@app.route(f'/webhook/{config.TELEGRAM_TOKEN}', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
    try:
        update = Update.de_json(request.get_json(), telegram_app.bot)
        telegram_app.process_update(update)
        return jsonify({'status': 'ok'})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ webhook: {e}")
        return jsonify({'status': 'error'}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """Health check –¥–ª—è Render"""
    return jsonify({'status': 'healthy'})

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
telegram_app = None

async def setup_telegram_app():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global telegram_app
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    telegram_app = Application.builder().token(config.TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    telegram_app.add_handler(CommandHandler("start", start_command))
    telegram_app.add_handler(CallbackQueryHandler(handle_callback))
    telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    telegram_app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await telegram_app.initialize()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    webhook_url = f"https://lesli45bot.onrender.com/webhook/{config.TELEGRAM_TOKEN}"
    await telegram_app.bot.set_webhook(webhook_url)
    
    logger.info(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
        if not config.TELEGRAM_TOKEN:
            logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        if not config.OPENAI_API_KEY:
            logger.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é LESLI45BOT 2.0...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        asyncio.run(assistant.initialize_database())
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        asyncio.run(setup_telegram_app())
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        logger.info("üéâ LESLI45BOT 2.0 –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
        port = int(os.environ.get('PORT', 5000))
        app.run(host='0.0.0.0', port=port, debug=False)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        logger.error(traceback.format_exc())

if __name__ == '__main__':
    main()
